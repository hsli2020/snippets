/service/archivesrv.go
/service/articlesrv.go
/service/categorysrv.go
/service/commentsrv.go
/service/db.go
/service/exportsrv.go
/service/importsrv.go
/service/initsrv.go
/service/navigationsrv.go
/service/settingsrv.go
/service/statisticsrv.go
/service/tagsrv.go
/service/upgradesrv.go
/service/usersrv.go

# File: /service/usersrv.go
===========================

package service

var User = &userService{mutex: &sync.Mutex{}}

type userService struct {
	mutex *sync.Mutex
}

func (s *userService) GetBlogAdmin(blogID uint64) *model.User {
}

# File: /service/exportsrv.go
=============================

package service

var Export = &exportService{}

type exportService struct {
}

func (s *exportService) ExportMarkdowns(blogID uint64) (ret []*MarkdownFile) {
}

# File: /service/commentsrv.go
==============================

package service

var Comment = &commentService{mutex: &sync.Mutex{}}

type commentService struct {
	mutex *sync.Mutex
}

func (s *commentService) UpdatePushedAt(comment *model.Comment) error {
}

# usage
=======

archiveModels := service.Archive.GetArchives(blogID)
articleSetting := service.Setting.GetSetting(blogID)
authorModel := service.User.GetUser(articleModel.AuthorID)
article := service.Article.GetArticleByPath(path, userBlog.ID)
user := service.User.GetUserByName(username)
userBlogs := service.User.GetUserBlogs(userID)
go service.Statistic.IncViewCount(userBlog.ID)
settings := service.Setting.GetAllSettings(blogID)
statistics := service.Statistic.GetAllStatistics(blogID)
users, _ := service.User.GetBlogUsers(1, blogID)
categories := service.Category.GetCategories(math.MaxInt8, blogID)
tags := service.Tag.GetTags(tagSize, blogID)
mostViewArticles := service.Article.GetMostViewArticles(mostViewArticleSize, blogID)
authorModel := service.User.GetUser(article.AuthorID)
recentComments := service.Comment.GetRecentComments(recentCommentSize, blogID)
commentAuthor := service.User.GetUser(comment.AuthorID)
commentAuthorBlog := service.User.GetOwnBlog(commentAuthor.ID)
page := service.Comment.GetCommentPage(comment.ArticleID, comment.ID, blogID)
article := service.Article.ConsoleGetArticle(comment.ArticleID)
if err := service.Article.AddArticle(article); nil != err {
