package main

import (
	"bufio"
	"compress/gzip"
	"crypto/md5"
	"crypto/rand"
	"encoding/hex"
	"flag"
	"fmt"
	"hash"
	"io"
	"io/ioutil"
	"mime"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"
)

var (
	newline    = []byte{'\n'}
	dataindent = []byte{'\t'}
	space      = []byte{' '}

	input  = flag.String("input", "", "The path to the folder containing the assets")
	output = flag.String("output", "", "The output filename")

	files       = map[string]string{}
	filesType   = map[string]string{}
	regFuncName = regexp.MustCompile(`[^a-zA-Z0-9_]`)
)

// ByteWriter takes text input and writes them as hexadecimal bytes
type ByteWriter struct {
	io.Writer
	c      int
	digest hash.Hash
	hashed []byte
}

func (w *ByteWriter) Write(p []byte) (n int, err error) {
	if len(p) == 0 {
		return
	}
	for n = range p {
		fmt.Fprintf(w.Writer, "\\x%02x", p[n])
	}

	n++
	w.digest.Write(p)
	w.hashed = w.digest.Sum(w.hashed)
	return
}

func safeVarName(name string) string {
	var inBytes, outBytes []byte
	var toUpper bool
	// uppercase the first char to make it public
	name = "_" + strings.Title(name)
	parts := strings.Split(string(name), ".")
	parts[len(parts)-1] = strings.ToUpper(parts[len(parts)-1])
	name = strings.Join(parts, "")
	inBytes = []byte(name)
	for i := 0; i < len(inBytes); i++ {
		if regFuncName.Match([]byte{inBytes[i]}) {
			toUpper = true
		} else if toUpper {
			outBytes = append(outBytes, []byte(strings.ToUpper(string(inBytes[i])))...)
			toUpper = false
		} else {
			outBytes = append(outBytes, inBytes[i])
		}
	}
	return string(outBytes)
}

// need to pipe read to write
func recursiveRead(w io.Writer, folder string) {
	fileInfos, err := ioutil.ReadDir(folder)
	if err != nil {
		panic(err)
	}
	for _, info := range fileInfos {
		filename := path.Join(folder, info.Name())
		if info.IsDir() {
			recursiveRead(w, filename)
		} else {
			println("Reading File -> " + filename)
			relativePath := strings.Replace(filename, *input, "", -1)
			relativePath = path.Join("/", relativePath)
			fd, err := os.Open(filename)
			if err != nil {
				panic(err)
			}
			defer fd.Close()
			varname := safeVarName(relativePath)
			_, err = fmt.Fprintf(w, "\n// %s file\nvar %s = []byte(\"", varname, varname)
			if err != nil {
				panic(err)
			}
			byteWriter := &ByteWriter{
				Writer: w,
				digest: md5.New(),
				hashed: []byte{},
			}
			gz, err := gzip.NewWriterLevel(byteWriter, gzip.BestCompression)
			if err != nil {
				panic(err)
			}
			_, err = io.Copy(gz, fd)
			if err != nil {
				panic(err)
			}
			err = gz.Close()
			if err != nil {
				panic(err)
			}
			_, err = fmt.Fprintf(w, "\")\n")
			if err != nil {
				panic(err)
			}
			files[relativePath] = hex.EncodeToString(byteWriter.digest.Sum(nil))
			filesType[relativePath] = mime.TypeByExtension(filepath.Ext(relativePath))
		}
	}
}

func randStr() string {
	dictionary := "0123456789abcdef"
	bytes := make([]byte, 34)
	rand.Read(bytes)
	for k, v := range bytes {
		bytes[k] = dictionary[v%byte(len(dictionary))]
	}
	return string(bytes)
}

func main() {
	mime.AddExtensionType(".ico", "image/x-icon")
	mime.AddExtensionType(".eot", "font/eot")
	mime.AddExtensionType(".tff", "font/tff")
	mime.AddExtensionType(".woff", "application/font-woff")
	mime.AddExtensionType(".woff2", "application/font-woff")
	println(fmt.Sprintf("go-embed 1.1.1"))
	flag.Parse()
	if *input == "" {
		flag.PrintDefaults()
		panic("-input is required.")
	}
	if *output == "" {
		flag.PrintDefaults()
		panic("-output is required.")
	}
	outputFile, err := os.Create(*output)
	if err != nil {
		panic(err)
	}
	defer outputFile.Close()
	bfd := bufio.NewWriter(outputFile)
	defer bfd.Flush()
	if _, err = fmt.Fprint(bfd, "// CODE GENERATED BY GO-EMBED. WARNING!! DO NOT EDIT!!"); err != nil {
		panic(err)
	}
	if _, err = fmt.Fprint(bfd, `
package assets

import (
	"errors"
)

// ErrAssetFileNotFound is returned whenever an asset cannot be found
var ErrAssetFileNotFound = errors.New("asset: file not found")
`); err != nil {
		panic(err)
	}
	recursiveRead(bfd, *input)
	if _, err = fmt.Fprintf(bfd, `
// Asset Gets the file from from the stored data and returns the data,
// the md5 hash of its content and its content type and an error if
// it is not found
func Asset(base, path string) ([]byte, string, string, error) {
	switch path {
`); err != nil {
		panic(err)
	}
	for path, hash := range files {
		if _, err = fmt.Fprintf(bfd, `	case "%s":
		return %s, "%s", "%s", nil
`, path, safeVarName(path), hash, filesType[path]); err != nil {
			panic(err)
		}
	}
	if _, err = fmt.Fprintf(bfd, `	default:
		return nil, "", "", ErrAssetFileNotFound
	}
}
`); err != nil {
		panic(err)
	}
}
