PSR-0: Autoloading Standard

Deprecated - As of 2014-10-21 PSR-0 has been marked as deprecated.
PSR-4 is now recommended as an alternative.

A fully-qualified namespace and class must have the following structure

    \<Vendor Name>\(<Namespace>\)*<Class Name>

Each _ character in the CLASS NAME is converted to a DIRECTORY_SEPARATOR.
The _ character has no special meaning in the namespace.

Examples

                               \Doctrine\Common\IsolatedClassLoader =>
    /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php

                               \Symfony\Core\Request =>
    /path/to/project/lib/vendor/Symfony/Core/Request.php

                               \Zend\Acl =>
    /path/to/project/lib/vendor/Zend/Acl.php

                               \Zend\Mail\Message =>
    /path/to/project/lib/vendor/Zend/Mail/Message.php

Underscores in Namespaces and Class Names

                               \namespace\package\Class_Name =>
    /path/to/project/lib/vendor/namespace/package/Class/Name.php

                               \namespace\package_name\Class_Name =>
    /path/to/project/lib/vendor/namespace/package_name/Class/Name.php

Example Implementation

<?php

const DS = DIRECTORY_SEPARATOR;

function autoload($className)
{
    $className = ltrim($className, '\\');
    $fileName  = '';
    $namespace = '';
    if ($lastNsPos = strrpos($className, '\\')) {
        $namespace = substr($className, 0, $lastNsPos);
        $className = substr($className, $lastNsPos + 1);
        $fileName  = str_replace('\\', DS, $namespace) . DS;
    }
    $fileName .= str_replace('_', DS, $className) . '.php';

    require $fileName;
}
spl_autoload_register('autoload');

<?php

/**
 * SplClassLoader implementation that implements the technical interoperability
 * standards for PHP 5.3 namespaces and class names.
 *
 * http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1
 *
 *     // Example which loads classes for the Doctrine Common package in the
 *     // Doctrine\Common namespace.
 *     $classLoader = new SplClassLoader('Doctrine\Common', '/path/to/doctrine');
 *     $classLoader->register();
 */
class SplClassLoader
{
    private $_fileExtension = '.php';
    private $_namespace;
    private $_includePath;
    private $_namespaceSeparator = '\\';

    /**
     * Creates a new <tt>SplClassLoader</tt> that loads classes of the specified namespace.
     */
    public function __construct($ns = null, $includePath = null)
    {
        $this->_namespace = $ns;
        $this->_includePath = $includePath;
    }

    public function setNamespaceSeparator($sep) { $this->_namespaceSeparator = $sep; }
    public function getNamespaceSeparator() { return $this->_namespaceSeparator; }

    public function setIncludePath($includePath) { $this->_includePath = $includePath; }
    public function getIncludePath() { return $this->_includePath; }

    public function setFileExtension($fileExtension) { $this->_fileExtension = $fileExtension; }
    public function getFileExtension() { return $this->_fileExtension; }

    public function register() { spl_autoload_register(array($this, 'loadClass')); }
    public function unregister() { spl_autoload_unregister(array($this, 'loadClass')); }

    /**
     * Loads the given class or interface.
     *
     * @param string $className The name of the class to load.
     * @return void
     */
    public function loadClass($className)
    {
        if (null === $this->_namespace || $this->_namespace.$this->_namespaceSeparator ===
                substr($className, 0, strlen($this->_namespace.$this->_namespaceSeparator))) {
            $fileName = '';
            $namespace = '';
            if (false !== ($lastNsPos = strripos($className, $this->_namespaceSeparator))) {
                $namespace = substr($className, 0, $lastNsPos);
                $className = substr($className, $lastNsPos + 1);
                $fileName = str_replace($this->_namespaceSeparator, DS, $namespace) . DS;
            }
            $fileName .= str_replace('_', DS, $className) . $this->_fileExtension;

            require ($this->_includePath !== null ? $this->_includePath . DS : '') . $fileName;
        }
    }
}
