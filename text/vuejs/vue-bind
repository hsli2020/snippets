数据绑定语法

Vue.js 的模板是基于 DOM 实现的。这意味着所有的 Vue.js 模板都是可解析的有效的 HTML，
且通过一些特殊的特性做了增强。Vue 模板因而从根本上不同于基于字符串的模板，请记住这点。

** 插值

文本

数据绑定最基础的形式是文本插值，使用 “Mustache” 语法（双大括号）：
<span>Message: {{ msg }}</span>

你也可以只处理单次插值，今后的数据变化就不会再引起插值更新了：
<span>This will never change: {{* msg }}</span>

原始的 HTML
<div>{{{ raw_html }}}</div>

内容以 HTML 字符串插入——数据绑定将被忽略。如果需要复用模板片断，应当使用 partials。
记住，只对可信内容使用 HTML 插值，永不用于用户提交的内容。

HTML 特性
<div id="item-{{ id }}"></div>

绑定表达式
{{ number + 1 }}
{{ ok ? 'YES' : 'NO' }}
{{ message.split('').reverse().join('') }}

<!-- 这是一个语句，不是一个表达式： -->
{{ var a = 1 }}

<!-- 流程控制也不可以，可改用三元表达式 -->
{{ if (ok) { return message } }}

** 过滤器

{{ message | capitalize }}
这个过滤器其实只是一个 JavaScript 函数。不能在表达式内使用过滤器，只能添加到表达式的后面。

过滤器可以串联：
{{ message | filterA | filterB }}

过滤器也可以接受参数：
{{ message | filterA 'arg1' arg2 }}

** 指令

指令 (Directives) 是特殊的带有前缀 v- 的特性。指令的值限定为绑定表达式，
因此上面提到的 JavaScript 表达式及过滤器规则在这里也适用。指令的职责就
是当其表达式的值改变时把某些特殊的行为应用到 DOM 上。

<p v-if="greeting">Hello!</p>
这里 v-if 指令将根据表达式 greeting 值的真假删除/插入 <p> 元素。

** 参数

有些指令可以在其名称后面带一个“参数” (Argument)，中间放一个冒号隔开。
例如，v-bind 指令用于响应地更新 HTML 特性：
<a v-bind:href="url"></a>

这里 href 是参数，它告诉 v-bind 指令将元素的 href 特性跟表达式 url 的值绑定。
可能你已注意到可以用特性插值 href="{{url}}" 获得同样的结果：这样没错，并且实
际上在内部特性插值会转为 v-bind 绑定。

另一个例子是 v-on 指令，它用于监听 DOM 事件：
<a v-on:click="doSomething">

** 修饰符

修饰符 (Modifiers) 是以半角句号 . 开始的特殊后缀，用于表示指令应当以特殊方式绑定。
例如 .literal 修饰符告诉指令将它的值解析为一个字面字符串而不是一个表达式：

<a v-bind:href.literal="/a/b/c"></a>

当然，这似乎没有意义，因为我们只需要使用 href="/a/b/c" 而不必使用一个指令。
这个例子只是为了演示语法。后面我们将看到修饰符更多的实践用法。

** 缩写

v- 前缀是一种标识模板中特定的 Vue 特性的视觉暗示。当你需要在一些现有的 HTML 代码中
添加动态行为时，这些前缀可以起到很好的区分效果。但你在使用一些常用指令的时候，你会
感觉一直这么写实在是啰嗦。而且在构建单页应用（SPA ）时，Vue.js 会管理所有的模板，
此时 v- 前缀也没那么重要了。因此Vue.js为两个最常用的指令v-bind 和 v-on提供特别的缩写：

v-bind 缩写

<!-- 完整语法 -->
<a v-bind:href="url"></a>

<!-- 缩写 -->
<a :href="url"></a>

<!-- 完整语法 -->
<button v-bind:disabled="someDynamicCondition">Button</button>

<!-- 缩写 -->
<button :disabled="someDynamicCondition">Button</button>

v-on 缩写

<!-- 完整语法 -->
<a v-on:click="doSomething"></a>

<!-- 缩写 -->
<a @click="doSomething"></a>

它们看起来跟“合法”的 HTML 有点不同，但是它们在所有 Vue.js 支持的浏览器中都能被正确地解析，
并且不会出现在最终渲染的标记中。缩写语法完全是可选的，不过随着一步步学习的深入，你会庆幸
拥有它们。
