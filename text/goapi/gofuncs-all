archive/tar
func FileInfoHeader(fi os.FileInfo, link string) (*Header, error)
func (h *Header) FileInfo() os.FileInfo
func NewReader(r io.Reader) *Reader
func (tr *Reader) Next() (*Header, error)
func (tr *Reader) Read(b []byte) (n int, err error)
func NewWriter(w io.Writer) *Writer
func (tw *Writer) Close() error
func (tw *Writer) Flush() error
func (tw *Writer) Write(b []byte) (n int, err error)
func (tw *Writer) WriteHeader(hdr *Header) error

archive/zip
func RegisterCompressor(method uint16, comp Compressor)
func RegisterDecompressor(method uint16, d Decompressor)
func (f *File) DataOffset() (offset int64, err error)
func (f *File) Open() (rc io.ReadCloser, err error)
func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)
func (h *FileHeader) FileInfo() os.FileInfo
func (h *FileHeader) ModTime() time.Time
func (h *FileHeader) Mode() (mode os.FileMode)
func (h *FileHeader) SetModTime(t time.Time)
func (h *FileHeader) SetMode(mode os.FileMode)
func OpenReader(name string) (*ReadCloser, error)
func (rc *ReadCloser) Close() error
func NewReader(r io.ReaderAt, size int64) (*Reader, error)
func NewWriter(w io.Writer) *Writer
func (w *Writer) Close() error
func (w *Writer) Create(name string) (io.Writer, error)
func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)

bufio
func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)
func NewReadWriter(r *Reader, w *Writer) *ReadWriter
func NewReader(rd io.Reader) *Reader
func NewReaderSize(rd io.Reader, size int) *Reader
func (b *Reader) Buffered() int
func (b *Reader) Peek(n int) ([]byte, error)
func (b *Reader) Read(p []byte) (n int, err error)
func (b *Reader) ReadByte() (c byte, err error)
func (b *Reader) ReadBytes(delim byte) (line []byte, err error)
func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)
func (b *Reader) ReadRune() (r rune, size int, err error)
func (b *Reader) ReadSlice(delim byte) (line []byte, err error)
func (b *Reader) ReadString(delim byte) (line string, err error)
func (b *Reader) Reset(r io.Reader)
func (b *Reader) UnreadByte() error
func (b *Reader) UnreadRune() error
func (b *Reader) WriteTo(w io.Writer) (n int64, err error)
func NewScanner(r io.Reader) *Scanner
func (s *Scanner) Bytes() []byte
func (s *Scanner) Err() error
func (s *Scanner) Scan() bool
func (s *Scanner) Split(split SplitFunc)
func (s *Scanner) Text() string
func NewWriter(w io.Writer) *Writer
func NewWriterSize(w io.Writer, size int) *Writer
func (b *Writer) Available() int
func (b *Writer) Buffered() int
func (b *Writer) Flush() error
func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)
func (b *Writer) Reset(w io.Writer)
func (b *Writer) Write(p []byte) (nn int, err error)
func (b *Writer) WriteByte(c byte) error
func (b *Writer) WriteRune(r rune) (size int, err error)
func (b *Writer) WriteString(s string) (int, error)

bytes
func Compare(a, b []byte) int
func Contains(b, subslice []byte) bool
func Count(s, sep []byte) int
func Equal(a, b []byte) bool
func EqualFold(s, t []byte) bool
func Fields(s []byte) [][]byte
func FieldsFunc(s []byte, f func(rune) bool) [][]byte
func HasPrefix(s, prefix []byte) bool
func HasSuffix(s, suffix []byte) bool
func Index(s, sep []byte) int
func IndexAny(s []byte, chars string) int
func IndexByte(s []byte, c byte) int
func IndexFunc(s []byte, f func(r rune) bool) int
func IndexRune(s []byte, r rune) int
func Join(s [][]byte, sep []byte) []byte
func LastIndex(s, sep []byte) int
func LastIndexAny(s []byte, chars string) int
func LastIndexFunc(s []byte, f func(r rune) bool) int
func Map(mapping func(r rune) rune, s []byte) []byte
func Repeat(b []byte, count int) []byte
func Replace(s, old, new []byte, n int) []byte
func Runes(s []byte) []rune
func Split(s, sep []byte) [][]byte
func SplitAfter(s, sep []byte) [][]byte
func SplitAfterN(s, sep []byte, n int) [][]byte
func SplitN(s, sep []byte, n int) [][]byte
func Title(s []byte) []byte
func ToLower(s []byte) []byte
func ToLowerSpecial(_case unicode.SpecialCase, s []byte) []byte
func ToTitle(s []byte) []byte
func ToTitleSpecial(_case unicode.SpecialCase, s []byte) []byte
func ToUpper(s []byte) []byte
func ToUpperSpecial(_case unicode.SpecialCase, s []byte) []byte
func Trim(s []byte, cutset string) []byte
func TrimFunc(s []byte, f func(r rune) bool) []byte
func TrimLeft(s []byte, cutset string) []byte
func TrimLeftFunc(s []byte, f func(r rune) bool) []byte
func TrimPrefix(s, prefix []byte) []byte
func TrimRight(s []byte, cutset string) []byte
func TrimRightFunc(s []byte, f func(r rune) bool) []byte
func TrimSpace(s []byte) []byte
func TrimSuffix(s, suffix []byte) []byte
func NewBuffer(buf []byte) *Buffer
func NewBufferString(s string) *Buffer
func (b *Buffer) Bytes() []byte
func (b *Buffer) Grow(n int)
func (b *Buffer) Len() int
func (b *Buffer) Next(n int) []byte
func (b *Buffer) Read(p []byte) (n int, err error)
func (b *Buffer) ReadByte() (c byte, err error)
func (b *Buffer) ReadBytes(delim byte) (line []byte, err error)
func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error)
func (b *Buffer) ReadRune() (r rune, size int, err error)
func (b *Buffer) ReadString(delim byte) (line string, err error)
func (b *Buffer) Reset()
func (b *Buffer) String() string
func (b *Buffer) Truncate(n int)
func (b *Buffer) UnreadByte() error
func (b *Buffer) UnreadRune() error
func (b *Buffer) Write(p []byte) (n int, err error)
func (b *Buffer) WriteByte(c byte) error
func (b *Buffer) WriteRune(r rune) (n int, err error)
func (b *Buffer) WriteString(s string) (n int, err error)
func (b *Buffer) WriteTo(w io.Writer) (n int64, err error)
func NewReader(b []byte) *Reader
func (r *Reader) Len() int
func (r *Reader) Read(b []byte) (n int, err error)
func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)
func (r *Reader) ReadByte() (b byte, err error)
func (r *Reader) ReadRune() (ch rune, size int, err error)
func (r *Reader) Seek(offset int64, whence int) (int64, error)
func (r *Reader) UnreadByte() error
func (r *Reader) UnreadRune() error
func (r *Reader) WriteTo(w io.Writer) (n int64, err error)
compress/bzip2
func NewReader(r io.Reader) io.Reader
func (s StructuralError) Error() string
compress/flate
func NewReader(r io.Reader) io.ReadCloser
func NewReaderDict(r io.Reader, dict []byte) io.ReadCloser
func (e CorruptInputError) Error() string
func (e InternalError) Error() string
func (e *ReadError) Error() string
func (e *WriteError) Error() string
func NewWriter(w io.Writer, level int) (*Writer, error)
func NewWriterDict(w io.Writer, level int, dict []byte) (*Writer, error)
func (w *Writer) Close() error
func (w *Writer) Flush() error
func (w *Writer) Reset(dst io.Writer)
func (w *Writer) Write(data []byte) (n int, err error)
compress/gzip
func NewReader(r io.Reader) (*Reader, error)
func (z *Reader) Close() error
func (z *Reader) Read(p []byte) (n int, err error)
func NewWriter(w io.Writer) *Writer
func NewWriterLevel(w io.Writer, level int) (*Writer, error)
func (z *Writer) Close() error
func (z *Writer) Flush() error
func (z *Writer) Reset(w io.Writer)
func (z *Writer) Write(p []byte) (int, error)
compress/lzw
func NewReader(r io.Reader, order Order, litWidth int) io.ReadCloser
func NewWriter(w io.Writer, order Order, litWidth int) io.WriteCloser
compress/zlib
func NewReader(r io.Reader) (io.ReadCloser, error)
func NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)
func NewWriter(w io.Writer) *Writer
func NewWriterLevel(w io.Writer, level int) (*Writer, error)
func NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)
func (z *Writer) Close() error
func (z *Writer) Flush() error
func (z *Writer) Reset(w io.Writer)
func (z *Writer) Write(p []byte) (n int, err error)
container/heap
func Fix(h Interface, i int)
func Init(h Interface)
func Pop(h Interface) interface{}
func Push(h Interface, x interface{})
func Remove(h Interface, i int) interface{}
container/list
func (e *Element) Next() *Element
func (e *Element) Prev() *Element
func New() *List
func (l *List) Back() *Element
func (l *List) Front() *Element
func (l *List) Init() *List
func (l *List) InsertAfter(v interface{}, mark *Element) *Element
func (l *List) InsertBefore(v interface{}, mark *Element) *Element
func (l *List) Len() int
func (l *List) MoveAfter(e, mark *Element)
func (l *List) MoveBefore(e, mark *Element)
func (l *List) MoveToBack(e *Element)
func (l *List) MoveToFront(e *Element)
func (l *List) PushBack(v interface{}) *Element
func (l *List) PushBackList(other *List)
func (l *List) PushFront(v interface{}) *Element
func (l *List) PushFrontList(other *List)
func (l *List) Remove(e *Element) interface{}
container/ring
func New(n int) *Ring
func (r *Ring) Do(f func(interface{}))
func (r *Ring) Len() int
func (r *Ring) Link(s *Ring) *Ring
func (r *Ring) Move(n int) *Ring
func (r *Ring) Next() *Ring
func (r *Ring) Prev() *Ring
func (r *Ring) Unlink(n int) *Ring
crypto
func RegisterHash(h Hash, f func() hash.Hash)
func (h Hash) Available() bool
func (h Hash) New() hash.Hash
func (h Hash) Size() int
crypto/aes
func NewCipher(key []byte) (cipher.Block, error)
func (k KeySizeError) Error() string
crypto/cipher
func NewGCM(cipher Block) (AEAD, error)
func NewCBCDecrypter(b Block, iv []byte) BlockMode
func NewCBCEncrypter(b Block, iv []byte) BlockMode
func NewCFBDecrypter(block Block, iv []byte) Stream
func NewCFBEncrypter(block Block, iv []byte) Stream
func NewCTR(block Block, iv []byte) Stream
func NewOFB(b Block, iv []byte) Stream
func (r StreamReader) Read(dst []byte) (n int, err error)
func (w StreamWriter) Close() error
func (w StreamWriter) Write(src []byte) (n int, err error)
crypto/des
func NewCipher(key []byte) (cipher.Block, error)
func NewTripleDESCipher(key []byte) (cipher.Block, error)
func (k KeySizeError) Error() string
crypto/dsa
func GenerateKey(priv *PrivateKey, rand io.Reader) error
func GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) (err error)
func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error)
func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool
crypto/ecdsa
func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error)
func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool
func GenerateKey(c elliptic.Curve, rand io.Reader) (priv *PrivateKey, err error)
crypto/elliptic
func GenerateKey(curve Curve, rand io.Reader) (priv []byte, x, y *big.Int, err error)
func Marshal(curve Curve, x, y *big.Int) []byte
func Unmarshal(curve Curve, data []byte) (x, y *big.Int)
func P224() Curve
func P256() Curve
func P384() Curve
func P521() Curve
func (curve *CurveParams) Add(x1, y1, x2, y2 *big.Int) (*big.Int, *big.Int)
func (curve *CurveParams) Double(x1, y1 *big.Int) (*big.Int, *big.Int)
func (curve *CurveParams) IsOnCurve(x, y *big.Int) bool
func (curve *CurveParams) Params() *CurveParams
func (curve *CurveParams) ScalarBaseMult(k []byte) (*big.Int, *big.Int)
func (curve *CurveParams) ScalarMult(Bx, By *big.Int, k []byte) (*big.Int, *big.Int)
crypto/hmac
func Equal(mac1, mac2 []byte) bool
func New(h func() hash.Hash, key []byte) hash.Hash
crypto/md5
func New() hash.Hash
func Sum(data []byte) [Size]byte
crypto/rand
func Int(rand io.Reader, max *big.Int) (n *big.Int, err error)
func Prime(rand io.Reader, bits int) (p *big.Int, err error)
func Read(b []byte) (n int, err error)
crypto/rc4
func NewCipher(key []byte) (*Cipher, error)
func (c *Cipher) Reset()
func (c *Cipher) XORKeyStream(dst, src []byte)
func (k KeySizeError) Error() string
crypto/rsa
func DecryptOAEP(hash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext []byte, label []byte) (msg []byte, err error)
func DecryptPKCS1v15(rand io.Reader, priv *PrivateKey, ciphertext []byte) (out []byte, err error)
func DecryptPKCS1v15SessionKey(rand io.Reader, priv *PrivateKey, ciphertext []byte, key []byte) (err error)
func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) (out []byte, err error)
func EncryptPKCS1v15(rand io.Reader, pub *PublicKey, msg []byte) (out []byte, err error)
func SignPKCS1v15(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte) (s []byte, err error)
func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, opts *PSSOptions) (s []byte, err error)
func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) (err error)
func VerifyPSS(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte, opts *PSSOptions) error
func GenerateKey(random io.Reader, bits int) (priv *PrivateKey, err error)
func GenerateMultiPrimeKey(random io.Reader, nprimes int, bits int) (priv *PrivateKey, err error)
func (priv *PrivateKey) Precompute()
func (priv *PrivateKey) Validate() error
crypto/sha1
func New() hash.Hash
func Sum(data []byte) [Size]byte
crypto/sha256
func New() hash.Hash
func New224() hash.Hash
func Sum224(data []byte) (sum224 [Size224]byte)
func Sum256(data []byte) [Size]byte
crypto/sha512
func New() hash.Hash
func New384() hash.Hash
func Sum384(data []byte) (sum384 [Size384]byte)
func Sum512(data []byte) [Size]byte
crypto/subtle
func ConstantTimeByteEq(x, y uint8) int
func ConstantTimeCompare(x, y []byte) int
func ConstantTimeCopy(v int, x, y []byte)
func ConstantTimeEq(x, y int32) int
func ConstantTimeLessOrEq(x, y int) int
func ConstantTimeSelect(v, x, y int) int
crypto/tls
func Listen(network, laddr string, config *Config) (net.Listener, error)
func NewListener(inner net.Listener, config *Config) net.Listener
func LoadX509KeyPair(certFile, keyFile string) (cert Certificate, err error)
func X509KeyPair(certPEMBlock, keyPEMBlock []byte) (cert Certificate, err error)
func (c *Config) BuildNameToCertificate()
func Client(conn net.Conn, config *Config) *Conn
func Dial(network, addr string, config *Config) (*Conn, error)
func Server(conn net.Conn, config *Config) *Conn
func (c *Conn) Close() error
func (c *Conn) ConnectionState() ConnectionState
func (c *Conn) Handshake() error
func (c *Conn) LocalAddr() net.Addr
func (c *Conn) OCSPResponse() []byte
func (c *Conn) Read(b []byte) (n int, err error)
func (c *Conn) RemoteAddr() net.Addr
func (c *Conn) SetDeadline(t time.Time) error
func (c *Conn) SetReadDeadline(t time.Time) error
func (c *Conn) SetWriteDeadline(t time.Time) error
func (c *Conn) VerifyHostname(host string) error
func (c *Conn) Write(b []byte) (int, error)
crypto/x509
func CreateCertificate(rand io.Reader, template, parent *Certificate, pub interface{}, priv interface{}) (cert []byte, err error)
func DecryptPEMBlock(b *pem.Block, password []byte) ([]byte, error)
func EncryptPEMBlock(rand io.Reader, blockType string, data, password []byte, alg PEMCipher) (*pem.Block, error)
func IsEncryptedPEMBlock(b *pem.Block) bool
func MarshalECPrivateKey(key *ecdsa.PrivateKey) ([]byte, error)
func MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte
func MarshalPKIXPublicKey(pub interface{}) ([]byte, error)
func ParseCRL(crlBytes []byte) (certList *pkix.CertificateList, err error)
func ParseCertificates(asn1Data []byte) ([]*Certificate, error)
func ParseDERCRL(derBytes []byte) (certList *pkix.CertificateList, err error)
func ParseECPrivateKey(der []byte) (key *ecdsa.PrivateKey, err error)
func ParsePKCS1PrivateKey(der []byte) (key *rsa.PrivateKey, err error)
func ParsePKCS8PrivateKey(der []byte) (key interface{}, err error)
func ParsePKIXPublicKey(derBytes []byte) (pub interface{}, err error)
func NewCertPool() *CertPool
func (s *CertPool) AddCert(cert *Certificate)
func (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool)
func (s *CertPool) Subjects() (res [][]byte)
func ParseCertificate(asn1Data []byte) (*Certificate, error)
func (c *Certificate) CheckCRLSignature(crl *pkix.CertificateList) (err error)
func (c *Certificate) CheckSignature(algo SignatureAlgorithm, signed, signature []byte) (err error)
func (c *Certificate) CheckSignatureFrom(parent *Certificate) (err error)
func (c *Certificate) CreateCRL(rand io.Reader, priv interface{}, revokedCerts []pkix.RevokedCertificate, now, expiry time.Time) (crlBytes []byte, err error)
func (c *Certificate) Equal(other *Certificate) bool
func (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error)
func (c *Certificate) VerifyHostname(h string) error
func (e CertificateInvalidError) Error() string
func (ConstraintViolationError) Error() string
func (h HostnameError) Error() string
func (e SystemRootsError) Error() string
func (h UnhandledCriticalExtension) Error() string
func (e UnknownAuthorityError) Error() string
crypto/x509/pkix
func (certList *CertificateList) HasExpired(now time.Time) bool
func (n *Name) FillFromRDNSequence(rdns *RDNSequence)
func (n Name) ToRDNSequence() (ret RDNSequence)

database/sql
func Register(name string, driver driver.Driver)
func Open(driverName, dataSourceName string) (*DB, error)
func (db *DB) Begin() (*Tx, error)
func (db *DB) Close() error
func (db *DB) Driver() driver.Driver
func (db *DB) Exec(query string, args ...interface{}) (Result, error)
func (db *DB) Ping() error
func (db *DB) Prepare(query string) (*Stmt, error)
func (db *DB) Query(query string, args ...interface{}) (*Rows, error)
func (db *DB) QueryRow(query string, args ...interface{}) *Row
func (db *DB) SetMaxIdleConns(n int)
func (db *DB) SetMaxOpenConns(n int)
func (n *NullBool) Scan(value interface{}) error
func (n NullBool) Value() (driver.Value, error)
func (n *NullFloat64) Scan(value interface{}) error
func (n NullFloat64) Value() (driver.Value, error)
func (n *NullInt64) Scan(value interface{}) error
func (n NullInt64) Value() (driver.Value, error)
func (ns *NullString) Scan(value interface{}) error
func (ns NullString) Value() (driver.Value, error)
func (r *Row) Scan(dest ...interface{}) error
func (rs *Rows) Close() error
func (rs *Rows) Columns() ([]string, error)
func (rs *Rows) Err() error
func (rs *Rows) Next() bool
func (rs *Rows) Scan(dest ...interface{}) error
func (s *Stmt) Close() error
func (s *Stmt) Exec(args ...interface{}) (Result, error)
func (s *Stmt) Query(args ...interface{}) (*Rows, error)
func (s *Stmt) QueryRow(args ...interface{}) *Row
func (tx *Tx) Commit() error
func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)
func (tx *Tx) Prepare(query string) (*Stmt, error)
func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)
func (tx *Tx) QueryRow(query string, args ...interface{}) *Row
func (tx *Tx) Rollback() error
func (tx *Tx) Stmt(stmt *Stmt) *Stmt

database/sql/driver
func IsScanValue(v interface{}) bool
func IsValue(v interface{}) bool
func (n NotNull) ConvertValue(v interface{}) (Value, error)
func (n Null) ConvertValue(v interface{}) (Value, error)
func (RowsAffected) LastInsertId() (int64, error)
func (v RowsAffected) RowsAffected() (int64, error)

debug/dwarf
func (t *ArrayType) Size() int64
func (t *ArrayType) String() string
func (a Attr) GoString() string
func (a Attr) String() string
func (b *BasicType) Basic() *BasicType
func (t *BasicType) String() string
func (c *CommonType) Common() *CommonType
func (c *CommonType) Size() int64
func New(abbrev, aranges, frame, info, line, pubnames, ranges, str []byte) (*Data, error)
func (d *Data) Reader() *Reader
func (d *Data) Type(off Offset) (Type, error)
func (e DecodeError) Error() string
func (t *DotDotDotType) String() string
func (e *Entry) Val(a Attr) interface{}
func (t *EnumType) String() string
func (t *FuncType) String() string
func (t *PtrType) String() string
func (t *QualType) Size() int64
func (t *QualType) String() string
func (r *Reader) Next() (*Entry, error)
func (r *Reader) Seek(off Offset)
func (r *Reader) SkipChildren()
func (t *StructType) Defn() string
func (t *StructType) String() string
func (t Tag) GoString() string
func (t Tag) String() string
func (t *TypedefType) Size() int64
func (t *TypedefType) String() string
func (t *VoidType) String() string

debug/elf
func R_INFO(sym, typ uint32) uint64
func R_INFO32(sym, typ uint32) uint32
func R_SYM32(info uint32) uint32
func R_SYM64(info uint64) uint32
func R_TYPE32(info uint32) uint32
func R_TYPE64(info uint64) uint32
func ST_INFO(bind SymBind, typ SymType) uint8
func (i Class) GoString() string
func (i Class) String() string
func (i Data) GoString() string
func (i Data) String() string
func (i DynFlag) GoString() string
func (i DynFlag) String() string
func (i DynTag) GoString() string
func (i DynTag) String() string
func NewFile(r io.ReaderAt) (*File, error)
func Open(name string) (*File, error)
func (f *File) Close() error
func (f *File) DWARF() (*dwarf.Data, error)
func (f *File) DynString(tag DynTag) ([]string, error)
func (f *File) ImportedLibraries() ([]string, error)
func (f *File) ImportedSymbols() ([]ImportedSymbol, error)
func (f *File) Section(name string) *Section
func (f *File) SectionByType(typ SectionType) *Section
func (f *File) Symbols() ([]Symbol, error)
func (e *FormatError) Error() string
func (i Machine) GoString() string
func (i Machine) String() string
func (i NType) GoString() string
func (i NType) String() string
func (i OSABI) GoString() string
func (i OSABI) String() string
func (p *Prog) Open() io.ReadSeeker
func (i ProgFlag) GoString() string
func (i ProgFlag) String() string
func (i ProgType) GoString() string
func (i ProgType) String() string
func (i R_386) GoString() string
func (i R_386) String() string
func (i R_ALPHA) GoString() string
func (i R_ALPHA) String() string
func (i R_ARM) GoString() string
func (i R_ARM) String() string
func (i R_PPC) GoString() string
func (i R_PPC) String() string
func (i R_SPARC) GoString() string
func (i R_SPARC) String() string
func (i R_X86_64) GoString() string
func (i R_X86_64) String() string
func (s *Section) Data() ([]byte, error)
func (s *Section) Open() io.ReadSeeker
func (i SectionFlag) GoString() string
func (i SectionFlag) String() string
func (i SectionIndex) GoString() string
func (i SectionIndex) String() string
func (i SectionType) GoString() string
func (i SectionType) String() string
func ST_BIND(info uint8) SymBind
func (i SymBind) GoString() string
func (i SymBind) String() string
func ST_TYPE(info uint8) SymType
func (i SymType) GoString() string
func (i SymType) String() string
func ST_VISIBILITY(other uint8) SymVis
func (i SymVis) GoString() string
func (i SymVis) String() string
func (i Type) GoString() string
func (i Type) String() string
func (i Version) GoString() string
func (i Version) String() string

debug/gosym
func (e *DecodingError) Error() string
func NewLineTable(data []byte, text uint64) *LineTable
func (t *LineTable) LineToPC(line int, maxpc uint64) uint64
func (t *LineTable) PCToLine(pc uint64) int
func (s *Sym) BaseName() string
func (s *Sym) PackageName() string
func (s *Sym) ReceiverName() string
func (s *Sym) Static() bool
func NewTable(symtab []byte, pcln *LineTable) (*Table, error)
func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)
func (t *Table) LookupFunc(name string) *Func
func (t *Table) LookupSym(name string) *Sym
func (t *Table) PCToFunc(pc uint64) *Func
func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)
func (t *Table) SymByAddr(addr uint64) *Sym
func (e UnknownFileError) Error() string
func (e *UnknownLineError) Error() string

debug/macho
func (i Cpu) GoString() string
func (i Cpu) String() string
func NewFile(r io.ReaderAt) (*File, error)
func Open(name string) (*File, error)
func (f *File) Close() error
func (f *File) DWARF() (*dwarf.Data, error)
func (f *File) ImportedLibraries() ([]string, error)
func (f *File) ImportedSymbols() ([]string, error)
func (f *File) Section(name string) *Section
func (f *File) Segment(name string) *Segment
func (e *FormatError) Error() string
func (b LoadBytes) Raw() []byte
func (i LoadCmd) GoString() string
func (i LoadCmd) String() string
func (s *Section) Data() ([]byte, error)
func (s *Section) Open() io.ReadSeeker
func (s *Segment) Data() ([]byte, error)
func (s *Segment) Open() io.ReadSeeker

debug/pe
func NewFile(r io.ReaderAt) (*File, error)
func Open(name string) (*File, error)
func (f *File) Close() error
func (f *File) DWARF() (*dwarf.Data, error)
func (f *File) ImportedLibraries() ([]string, error)
func (f *File) ImportedSymbols() ([]string, error)
func (f *File) Section(name string) *Section
func (e *FormatError) Error() string
func (s *Section) Data() ([]byte, error)
func (s *Section) Open() io.ReadSeeker

encoding

encoding/ascii85
func Decode(dst, src []byte, flush bool) (ndst, nsrc int, err error)
func Encode(dst, src []byte) int
func MaxEncodedLen(n int) int
func NewDecoder(r io.Reader) io.Reader
func NewEncoder(w io.Writer) io.WriteCloser
func (e CorruptInputError) Error() string


encoding/asn1
func Marshal(val interface{}) ([]byte, error)
func Unmarshal(b []byte, val interface{}) (rest []byte, err error)
func UnmarshalWithParams(b []byte, val interface{}, params string) (rest []byte, err error)
func (b BitString) At(i int) int
func (b BitString) RightAlign() []byte
func (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool
func (e StructuralError) Error() string
func (e SyntaxError) Error() string


encoding/base32
func NewDecoder(enc *Encoding, r io.Reader) io.Reader
func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser
func (e CorruptInputError) Error() string
func NewEncoding(encoder string) *Encoding
func (enc *Encoding) Decode(dst, src []byte) (n int, err error)
func (enc *Encoding) DecodeString(s string) ([]byte, error)
func (enc *Encoding) DecodedLen(n int) int
func (enc *Encoding) Encode(dst, src []byte)
func (enc *Encoding) EncodeToString(src []byte) string
func (enc *Encoding) EncodedLen(n int) int

encoding/base64
func NewDecoder(enc *Encoding, r io.Reader) io.Reader
func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser
func (e CorruptInputError) Error() string
func NewEncoding(encoder string) *Encoding
func (enc *Encoding) Decode(dst, src []byte) (n int, err error)
func (enc *Encoding) DecodeString(s string) ([]byte, error)
func (enc *Encoding) DecodedLen(n int) int
func (enc *Encoding) Encode(dst, src []byte)
func (enc *Encoding) EncodeToString(src []byte) string
func (enc *Encoding) EncodedLen(n int) int

encoding/binary
func PutUvarint(buf []byte, x uint64) int
func PutVarint(buf []byte, x int64) int
func Read(r io.Reader, order ByteOrder, data interface{}) error
func ReadUvarint(r io.ByteReader) (uint64, error)
func ReadVarint(r io.ByteReader) (int64, error)
func Size(v interface{}) int
func Uvarint(buf []byte) (uint64, int)
func Varint(buf []byte) (int64, int)
func Write(w io.Writer, order ByteOrder, data interface{}) error

encoding/csv
func (e *ParseError) Error() string
func NewReader(r io.Reader) *Reader
func (r *Reader) Read() (record []string, err error)
func (r *Reader) ReadAll() (records [][]string, err error)
func NewWriter(w io.Writer) *Writer
func (w *Writer) Error() error
func (w *Writer) Flush()
func (w *Writer) Write(record []string) (err error)
func (w *Writer) WriteAll(records [][]string) (err error)

encoding/gob
func Register(value interface{})
func RegisterName(name string, value interface{})
func NewDecoder(r io.Reader) *Decoder
func (dec *Decoder) Decode(e interface{}) error
func (dec *Decoder) DecodeValue(v reflect.Value) error
func NewEncoder(w io.Writer) *Encoder
func (enc *Encoder) Encode(e interface{}) error
func (enc *Encoder) EncodeValue(value reflect.Value) error

encoding/hex
func Decode(dst, src []byte) (int, error)
func DecodeString(s string) ([]byte, error)
func DecodedLen(x int) int
func Dump(data []byte) string
func Dumper(w io.Writer) io.WriteCloser
func Encode(dst, src []byte) int
func EncodeToString(src []byte) string
func EncodedLen(n int) int
func (e InvalidByteError) Error() string

encoding/json
func Compact(dst *bytes.Buffer, src []byte) error
func HTMLEscape(dst *bytes.Buffer, src []byte)
func Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error
func Marshal(v interface{}) ([]byte, error)
func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)
func Unmarshal(data []byte, v interface{}) error
func NewDecoder(r io.Reader) *Decoder
func (dec *Decoder) Buffered() io.Reader
func (dec *Decoder) Decode(v interface{}) error
func (dec *Decoder) UseNumber()
func NewEncoder(w io.Writer) *Encoder
func (enc *Encoder) Encode(v interface{}) error
func (e *InvalidUTF8Error) Error() string
func (e *InvalidUnmarshalError) Error() string
func (e *MarshalerError) Error() string
func (n Number) Float64() (float64, error)
func (n Number) Int64() (int64, error)
func (n Number) String() string
func (m *RawMessage) MarshalJSON() ([]byte, error)
func (m *RawMessage) UnmarshalJSON(data []byte) error
func (e *SyntaxError) Error() string
func (e *UnmarshalFieldError) Error() string
func (e *UnmarshalTypeError) Error() string
func (e *UnsupportedTypeError) Error() string
func (e *UnsupportedValueError) Error() string

encoding/pem
func Encode(out io.Writer, b *Block) error
func EncodeToMemory(b *Block) []byte
func Decode(data []byte) (p *Block, rest []byte)

encoding/xml
func Escape(w io.Writer, s []byte)
func EscapeText(w io.Writer, s []byte) error
func Marshal(v interface{}) ([]byte, error)
func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)
func Unmarshal(data []byte, v interface{}) error
func (c CharData) Copy() CharData
func (c Comment) Copy() Comment
func NewDecoder(r io.Reader) *Decoder
func (d *Decoder) Decode(v interface{}) error
func (d *Decoder) DecodeElement(v interface{}, start *StartElement) error
func (d *Decoder) RawToken() (Token, error)
func (d *Decoder) Skip() error
func (d *Decoder) Token() (t Token, err error)
func (d Directive) Copy() Directive
func NewEncoder(w io.Writer) *Encoder
func (enc *Encoder) Encode(v interface{}) error
func (enc *Encoder) EncodeElement(v interface{}, start StartElement) error
func (enc *Encoder) EncodeToken(t Token) error
func (enc *Encoder) Flush() error
func (enc *Encoder) Indent(prefix, indent string)
func (p ProcInst) Copy() ProcInst
func (e StartElement) Copy() StartElement
func (e StartElement) End() EndElement
func (e *SyntaxError) Error() string
func (e *TagPathError) Error() string
func CopyToken(t Token) Token
func (e UnmarshalError) Error() string
func (e *UnsupportedTypeError) Error() string

errors
func New(text string) error

expvar
func Do(f func(KeyValue))
func Publish(name string, v Var)
func NewFloat(name string) *Float
func (v *Float) Add(delta float64)
func (v *Float) Set(value float64)
func (v *Float) String() string
func (f Func) String() string
func NewInt(name string) *Int
func (v *Int) Add(delta int64)
func (v *Int) Set(value int64)
func (v *Int) String() string
func NewMap(name string) *Map
func (v *Map) Add(key string, delta int64)
func (v *Map) AddFloat(key string, delta float64)
func (v *Map) Do(f func(KeyValue))
func (v *Map) Get(key string) Var
func (v *Map) Init() *Map
func (v *Map) Set(key string, av Var)
func (v *Map) String() string
func NewString(name string) *String
func (v *String) Set(value string)
func (v *String) String() string
func Get(name string) Var

flag
func Arg(i int) string
func Args() []string
func Bool(name string, value bool, usage string) *bool
func BoolVar(p *bool, name string, value bool, usage string)
func Duration(name string, value time.Duration, usage string) *time.Duration
func DurationVar(p *time.Duration, name string, value time.Duration, usage string)
func Float64(name string, value float64, usage string) *float64
func Float64Var(p *float64, name string, value float64, usage string)
func Int(name string, value int, usage string) *int
func Int64(name string, value int64, usage string) *int64
func Int64Var(p *int64, name string, value int64, usage string)
func IntVar(p *int, name string, value int, usage string)
func NArg() int
func NFlag() int
func Parse()
func Parsed() bool
func PrintDefaults()
func Set(name, value string) error
func String(name string, value string, usage string) *string
func StringVar(p *string, name string, value string, usage string)
func Uint(name string, value uint, usage string) *uint
func Uint64(name string, value uint64, usage string) *uint64
func Uint64Var(p *uint64, name string, value uint64, usage string)
func UintVar(p *uint, name string, value uint, usage string)
func Var(value Value, name string, usage string)
func Visit(fn func(*Flag))
func VisitAll(fn func(*Flag))
func Lookup(name string) *Flag
func NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet
func (f *FlagSet) Arg(i int) string
func (f *FlagSet) Args() []string
func (f *FlagSet) Bool(name string, value bool, usage string) *bool
func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)
func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration
func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string)
func (f *FlagSet) Float64(name string, value float64, usage string) *float64
func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)
func (f *FlagSet) Init(name string, errorHandling ErrorHandling)
func (f *FlagSet) Int(name string, value int, usage string) *int
func (f *FlagSet) Int64(name string, value int64, usage string) *int64
func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)
func (f *FlagSet) IntVar(p *int, name string, value int, usage string)
func (f *FlagSet) Lookup(name string) *Flag
func (f *FlagSet) NArg() int
func (f *FlagSet) NFlag() int
func (f *FlagSet) Parse(arguments []string) error
func (f *FlagSet) Parsed() bool
func (f *FlagSet) PrintDefaults()
func (f *FlagSet) Set(name, value string) error
func (f *FlagSet) SetOutput(output io.Writer)
func (f *FlagSet) String(name string, value string, usage string) *string
func (f *FlagSet) StringVar(p *string, name string, value string, usage string)
func (f *FlagSet) Uint(name string, value uint, usage string) *uint
func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64
func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)
func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)
func (f *FlagSet) Var(value Value, name string, usage string)
func (f *FlagSet) Visit(fn func(*Flag))
func (f *FlagSet) VisitAll(fn func(*Flag))

fmt
func Errorf(format string, a ...interface{}) error
func Fprint(w io.Writer, a ...interface{}) (n int, err error)
func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)
func Fprintln(w io.Writer, a ...interface{}) (n int, err error)
func Fscan(r io.Reader, a ...interface{}) (n int, err error)
func Fscanf(r io.Reader, format string, a ...interface{}) (n int, err error)
func Fscanln(r io.Reader, a ...interface{}) (n int, err error)
func Print(a ...interface{}) (n int, err error)
func Printf(format string, a ...interface{}) (n int, err error)
func Println(a ...interface{}) (n int, err error)
func Scan(a ...interface{}) (n int, err error)
func Scanf(format string, a ...interface{}) (n int, err error)
func Scanln(a ...interface{}) (n int, err error)
func Sprint(a ...interface{}) string
func Sprintf(format string, a ...interface{}) string
func Sprintln(a ...interface{}) string
func Sscan(str string, a ...interface{}) (n int, err error)
func Sscanf(str string, format string, a ...interface{}) (n int, err error)
func Sscanln(str string, a ...interface{}) (n int, err error)

go/ast
func FileExports(src *File) bool
func FilterDecl(decl Decl, f Filter) bool
func FilterFile(src *File, f Filter) bool
func FilterPackage(pkg *Package, f Filter) bool
func Fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) (err error)
func Inspect(node Node, f func(Node) bool)
func IsExported(name string) bool
func NotNilFilter(_ string, v reflect.Value) bool
func PackageExports(pkg *Package) bool
func Print(fset *token.FileSet, x interface{}) error
func SortImports(fset *token.FileSet, f *File)
func Walk(v Visitor, node Node)
func (x *ArrayType) End() token.Pos
func (x *ArrayType) Pos() token.Pos
func (s *AssignStmt) End() token.Pos
func (s *AssignStmt) Pos() token.Pos
func (d *BadDecl) End() token.Pos
func (d *BadDecl) Pos() token.Pos
func (x *BadExpr) End() token.Pos
func (x *BadExpr) Pos() token.Pos
func (s *BadStmt) End() token.Pos
func (s *BadStmt) Pos() token.Pos
func (x *BasicLit) End() token.Pos
func (x *BasicLit) Pos() token.Pos
func (x *BinaryExpr) End() token.Pos
func (x *BinaryExpr) Pos() token.Pos
func (s *BlockStmt) End() token.Pos
func (s *BlockStmt) Pos() token.Pos
func (s *BranchStmt) End() token.Pos
func (s *BranchStmt) Pos() token.Pos
func (x *CallExpr) End() token.Pos
func (x *CallExpr) Pos() token.Pos
func (s *CaseClause) End() token.Pos
func (s *CaseClause) Pos() token.Pos
func (x *ChanType) End() token.Pos
func (x *ChanType) Pos() token.Pos
func (s *CommClause) End() token.Pos
func (s *CommClause) Pos() token.Pos
func (c *Comment) End() token.Pos
func (c *Comment) Pos() token.Pos
func (g *CommentGroup) End() token.Pos
func (g *CommentGroup) Pos() token.Pos
func (g *CommentGroup) Text() string
func NewCommentMap(fset *token.FileSet, node Node, comments []*CommentGroup) CommentMap
func (cmap CommentMap) Comments() []*CommentGroup
func (cmap CommentMap) Filter(node Node) CommentMap
func (cmap CommentMap) String() string
func (cmap CommentMap) Update(old, new Node) Node
func (x *CompositeLit) End() token.Pos
func (x *CompositeLit) Pos() token.Pos
func (s *DeclStmt) End() token.Pos
func (s *DeclStmt) Pos() token.Pos
func (s *DeferStmt) End() token.Pos
func (s *DeferStmt) Pos() token.Pos
func (x *Ellipsis) End() token.Pos
func (x *Ellipsis) Pos() token.Pos
func (s *EmptyStmt) End() token.Pos
func (s *EmptyStmt) Pos() token.Pos
func (s *ExprStmt) End() token.Pos
func (s *ExprStmt) Pos() token.Pos
func (f *Field) End() token.Pos
func (f *Field) Pos() token.Pos
func (f *FieldList) End() token.Pos
func (f *FieldList) NumFields() int
func (f *FieldList) Pos() token.Pos
func MergePackageFiles(pkg *Package, mode MergeMode) *File
func (f *File) End() token.Pos
func (f *File) Pos() token.Pos
func (s *ForStmt) End() token.Pos
func (s *ForStmt) Pos() token.Pos
func (d *FuncDecl) End() token.Pos
func (d *FuncDecl) Pos() token.Pos
func (x *FuncLit) End() token.Pos
func (x *FuncLit) Pos() token.Pos
func (x *FuncType) End() token.Pos
func (x *FuncType) Pos() token.Pos
func (d *GenDecl) End() token.Pos
func (d *GenDecl) Pos() token.Pos
func (s *GoStmt) End() token.Pos
func (s *GoStmt) Pos() token.Pos
func NewIdent(name string) *Ident
func (x *Ident) End() token.Pos
func (id *Ident) IsExported() bool
func (x *Ident) Pos() token.Pos
func (id *Ident) String() string
func (s *IfStmt) End() token.Pos
func (s *IfStmt) Pos() token.Pos
func (s *ImportSpec) End() token.Pos
func (s *ImportSpec) Pos() token.Pos
func (s *IncDecStmt) End() token.Pos
func (s *IncDecStmt) Pos() token.Pos
func (x *IndexExpr) End() token.Pos
func (x *IndexExpr) Pos() token.Pos
func (x *InterfaceType) End() token.Pos
func (x *InterfaceType) Pos() token.Pos
func (x *KeyValueExpr) End() token.Pos
func (x *KeyValueExpr) Pos() token.Pos
func (s *LabeledStmt) End() token.Pos
func (s *LabeledStmt) Pos() token.Pos
func (x *MapType) End() token.Pos
func (x *MapType) Pos() token.Pos
func (kind ObjKind) String() string
func NewObj(kind ObjKind, name string) *Object
func (obj *Object) Pos() token.Pos
func NewPackage(fset *token.FileSet, files map[string]*File, importer Importer, universe *Scope) (*Package, error)
func (p *Package) End() token.Pos
func (p *Package) Pos() token.Pos
func (x *ParenExpr) End() token.Pos
func (x *ParenExpr) Pos() token.Pos
func (s *RangeStmt) End() token.Pos
func (s *RangeStmt) Pos() token.Pos
func (s *ReturnStmt) End() token.Pos
func (s *ReturnStmt) Pos() token.Pos
func NewScope(outer *Scope) *Scope
func (s *Scope) Insert(obj *Object) (alt *Object)
func (s *Scope) Lookup(name string) *Object
func (s *Scope) String() string
func (s *SelectStmt) End() token.Pos
func (s *SelectStmt) Pos() token.Pos
func (x *SelectorExpr) End() token.Pos
func (x *SelectorExpr) Pos() token.Pos
func (s *SendStmt) End() token.Pos
func (s *SendStmt) Pos() token.Pos
func (x *SliceExpr) End() token.Pos
func (x *SliceExpr) Pos() token.Pos
func (x *StarExpr) End() token.Pos
func (x *StarExpr) Pos() token.Pos
func (x *StructType) End() token.Pos
func (x *StructType) Pos() token.Pos
func (s *SwitchStmt) End() token.Pos
func (s *SwitchStmt) Pos() token.Pos
func (x *TypeAssertExpr) End() token.Pos
func (x *TypeAssertExpr) Pos() token.Pos
func (s *TypeSpec) End() token.Pos
func (s *TypeSpec) Pos() token.Pos
func (s *TypeSwitchStmt) End() token.Pos
func (s *TypeSwitchStmt) Pos() token.Pos
func (x *UnaryExpr) End() token.Pos
func (x *UnaryExpr) Pos() token.Pos
func (s *ValueSpec) End() token.Pos
func (s *ValueSpec) Pos() token.Pos

go/build
func ArchChar(goarch string) (string, error)
func IsLocalImport(path string) bool
func (ctxt *Context) Import(path string, srcDir string, mode ImportMode) (*Package, error)
func (ctxt *Context) ImportDir(dir string, mode ImportMode) (*Package, error)
func (ctxt *Context) MatchFile(dir, name string) (match bool, err error)
func (ctxt *Context) SrcDirs() []string
func (e *NoGoError) Error() string
func Import(path, srcDir string, mode ImportMode) (*Package, error)
func ImportDir(dir string, mode ImportMode) (*Package, error)
func (p *Package) IsCommand() bool

go/doc
func Examples(files ...*ast.File) []*Example
func Synopsis(s string) string
func ToHTML(w io.Writer, text string, words map[string]string)
func ToText(w io.Writer, text string, indent, preIndent string, width int)
func New(pkg *ast.Package, importPath string, mode Mode) *Package
func (p *Package) Filter(f Filter)

go/format
func Node(dst io.Writer, fset *token.FileSet, node interface{}) error
func Source(src []byte) ([]byte, error)

go/parser
func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error)
func ParseExpr(x string) (ast.Expr, error)
func ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (f *ast.File, err error)

go/printer
func Fprint(output io.Writer, fset *token.FileSet, node interface{}) error
func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node interface{}) error

go/scanner
func PrintError(w io.Writer, err error)
func (e Error) Error() string
func (p *ErrorList) Add(pos token.Position, msg string)
func (p ErrorList) Err() error
func (p ErrorList) Error() string
func (p ErrorList) Len() int
func (p ErrorList) Less(i, j int) bool
func (p *ErrorList) RemoveMultiples()
func (p *ErrorList) Reset()
func (p ErrorList) Sort()
func (p ErrorList) Swap(i, j int)
func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode)
func (s *Scanner) Scan() (pos token.Pos, tok token.Token, lit string)

go/token
func (f *File) AddLine(offset int)
func (f *File) AddLineInfo(offset int, filename string, line int)
func (f *File) Base() int
func (f *File) Line(p Pos) int
func (f *File) LineCount() int
func (f *File) MergeLine(line int)
func (f *File) Name() string
func (f *File) Offset(p Pos) int
func (f *File) Pos(offset int) Pos
func (f *File) Position(p Pos) (pos Position)
func (f *File) SetLines(lines []int) bool
func (f *File) SetLinesForContent(content []byte)
func (f *File) Size() int
func NewFileSet() *FileSet
func (s *FileSet) AddFile(filename string, base, size int) *File
func (s *FileSet) Base() int
func (s *FileSet) File(p Pos) (f *File)
func (s *FileSet) Iterate(f func(*File) bool)
func (s *FileSet) Position(p Pos) (pos Position)
func (s *FileSet) Read(decode func(interface{}) error) error
func (s *FileSet) Write(encode func(interface{}) error) error
func (p Pos) IsValid() bool
func (pos *Position) IsValid() bool
func (pos Position) String() string
func Lookup(ident string) Token
func (tok Token) IsKeyword() bool
func (tok Token) IsLiteral() bool
func (tok Token) IsOperator() bool
func (op Token) Precedence() int
func (tok Token) String() string

hash

hash/adler32
func Checksum(data []byte) uint32
func New() hash.Hash32

hash/crc32
func Checksum(data []byte, tab *Table) uint32
func ChecksumIEEE(data []byte) uint32
func New(tab *Table) hash.Hash32
func NewIEEE() hash.Hash32
func Update(crc uint32, tab *Table, p []byte) uint32
func MakeTable(poly uint32) *Table

hash/crc64
func Checksum(data []byte, tab *Table) uint64
func New(tab *Table) hash.Hash64
func Update(crc uint64, tab *Table, p []byte) uint64
func MakeTable(poly uint64) *Table

hash/fnv
func New32() hash.Hash32
func New32a() hash.Hash32
func New64() hash.Hash64
func New64a() hash.Hash64

html
func EscapeString(s string) string
func UnescapeString(s string) string

html/template
func HTMLEscape(w io.Writer, b []byte)
func HTMLEscapeString(s string) string
func HTMLEscaper(args ...interface{}) string
func JSEscape(w io.Writer, b []byte)
func JSEscapeString(s string) string
func JSEscaper(args ...interface{}) string
func URLQueryEscaper(args ...interface{}) string
func (e *Error) Error() string
func Must(t *Template, err error) *Template
func New(name string) *Template
func ParseFiles(filenames ...string) (*Template, error)
func ParseGlob(pattern string) (*Template, error)
func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)
func (t *Template) Clone() (*Template, error)
func (t *Template) Delims(left, right string) *Template
func (t *Template) Execute(wr io.Writer, data interface{}) error
func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error
func (t *Template) Funcs(funcMap FuncMap) *Template
func (t *Template) Lookup(name string) *Template
func (t *Template) Name() string
func (t *Template) New(name string) *Template
func (t *Template) Parse(src string) (*Template, error)
func (t *Template) ParseFiles(filenames ...string) (*Template, error)
func (t *Template) ParseGlob(pattern string) (*Template, error)
func (t *Template) Templates() []*Template

image
func RegisterFormat(name, magic string, decode func(io.Reader) (Image, error), decodeConfig func(io.Reader) (Config, error))
func NewAlpha(r Rectangle) *Alpha
func (p *Alpha) At(x, y int) color.Color
func (p *Alpha) Bounds() Rectangle
func (p *Alpha) ColorModel() color.Model
func (p *Alpha) Opaque() bool
func (p *Alpha) PixOffset(x, y int) int
func (p *Alpha) Set(x, y int, c color.Color)
func (p *Alpha) SetAlpha(x, y int, c color.Alpha)
func (p *Alpha) SubImage(r Rectangle) Image
func NewAlpha16(r Rectangle) *Alpha16
func (p *Alpha16) At(x, y int) color.Color
func (p *Alpha16) Bounds() Rectangle
func (p *Alpha16) ColorModel() color.Model
func (p *Alpha16) Opaque() bool
func (p *Alpha16) PixOffset(x, y int) int
func (p *Alpha16) Set(x, y int, c color.Color)
func (p *Alpha16) SetAlpha16(x, y int, c color.Alpha16)
func (p *Alpha16) SubImage(r Rectangle) Image
func DecodeConfig(r io.Reader) (Config, string, error)
func NewGray(r Rectangle) *Gray
func (p *Gray) At(x, y int) color.Color
func (p *Gray) Bounds() Rectangle
func (p *Gray) ColorModel() color.Model
func (p *Gray) Opaque() bool
func (p *Gray) PixOffset(x, y int) int
func (p *Gray) Set(x, y int, c color.Color)
func (p *Gray) SetGray(x, y int, c color.Gray)
func (p *Gray) SubImage(r Rectangle) Image
func NewGray16(r Rectangle) *Gray16
func (p *Gray16) At(x, y int) color.Color
func (p *Gray16) Bounds() Rectangle
func (p *Gray16) ColorModel() color.Model
func (p *Gray16) Opaque() bool
func (p *Gray16) PixOffset(x, y int) int
func (p *Gray16) Set(x, y int, c color.Color)
func (p *Gray16) SetGray16(x, y int, c color.Gray16)
func (p *Gray16) SubImage(r Rectangle) Image
func Decode(r io.Reader) (Image, string, error)
func NewNRGBA(r Rectangle) *NRGBA
func (p *NRGBA) At(x, y int) color.Color
func (p *NRGBA) Bounds() Rectangle
func (p *NRGBA) ColorModel() color.Model
func (p *NRGBA) Opaque() bool
func (p *NRGBA) PixOffset(x, y int) int
func (p *NRGBA) Set(x, y int, c color.Color)
func (p *NRGBA) SetNRGBA(x, y int, c color.NRGBA)
func (p *NRGBA) SubImage(r Rectangle) Image
func NewNRGBA64(r Rectangle) *NRGBA64
func (p *NRGBA64) At(x, y int) color.Color
func (p *NRGBA64) Bounds() Rectangle
func (p *NRGBA64) ColorModel() color.Model
func (p *NRGBA64) Opaque() bool
func (p *NRGBA64) PixOffset(x, y int) int
func (p *NRGBA64) Set(x, y int, c color.Color)
func (p *NRGBA64) SetNRGBA64(x, y int, c color.NRGBA64)
func (p *NRGBA64) SubImage(r Rectangle) Image
func NewPaletted(r Rectangle, p color.Palette) *Paletted
func (p *Paletted) At(x, y int) color.Color
func (p *Paletted) Bounds() Rectangle
func (p *Paletted) ColorIndexAt(x, y int) uint8
func (p *Paletted) ColorModel() color.Model
func (p *Paletted) Opaque() bool
func (p *Paletted) PixOffset(x, y int) int
func (p *Paletted) Set(x, y int, c color.Color)
func (p *Paletted) SetColorIndex(x, y int, index uint8)
func (p *Paletted) SubImage(r Rectangle) Image
func Pt(X, Y int) Point
func (p Point) Add(q Point) Point
func (p Point) Div(k int) Point
func (p Point) Eq(q Point) bool
func (p Point) In(r Rectangle) bool
func (p Point) Mod(r Rectangle) Point
func (p Point) Mul(k int) Point
func (p Point) String() string
func (p Point) Sub(q Point) Point
func NewRGBA(r Rectangle) *RGBA
func (p *RGBA) At(x, y int) color.Color
func (p *RGBA) Bounds() Rectangle
func (p *RGBA) ColorModel() color.Model
func (p *RGBA) Opaque() bool
func (p *RGBA) PixOffset(x, y int) int
func (p *RGBA) Set(x, y int, c color.Color)
func (p *RGBA) SetRGBA(x, y int, c color.RGBA)
func (p *RGBA) SubImage(r Rectangle) Image
func NewRGBA64(r Rectangle) *RGBA64
func (p *RGBA64) At(x, y int) color.Color
func (p *RGBA64) Bounds() Rectangle
func (p *RGBA64) ColorModel() color.Model
func (p *RGBA64) Opaque() bool
func (p *RGBA64) PixOffset(x, y int) int
func (p *RGBA64) Set(x, y int, c color.Color)
func (p *RGBA64) SetRGBA64(x, y int, c color.RGBA64)
func (p *RGBA64) SubImage(r Rectangle) Image
func Rect(x0, y0, x1, y1 int) Rectangle
func (r Rectangle) Add(p Point) Rectangle
func (r Rectangle) Canon() Rectangle
func (r Rectangle) Dx() int
func (r Rectangle) Dy() int
func (r Rectangle) Empty() bool
func (r Rectangle) Eq(s Rectangle) bool
func (r Rectangle) In(s Rectangle) bool
func (r Rectangle) Inset(n int) Rectangle
func (r Rectangle) Intersect(s Rectangle) Rectangle
func (r Rectangle) Overlaps(s Rectangle) bool
func (r Rectangle) Size() Point
func (r Rectangle) String() string
func (r Rectangle) Sub(p Point) Rectangle
func (r Rectangle) Union(s Rectangle) Rectangle
func NewUniform(c color.Color) *Uniform
func (c *Uniform) At(x, y int) color.Color
func (c *Uniform) Bounds() Rectangle
func (c *Uniform) ColorModel() color.Model
func (c *Uniform) Convert(color.Color) color.Color
func (c *Uniform) Opaque() bool
func (c *Uniform) RGBA() (r, g, b, a uint32)
func NewYCbCr(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *YCbCr
func (p *YCbCr) At(x, y int) color.Color
func (p *YCbCr) Bounds() Rectangle
func (p *YCbCr) COffset(x, y int) int
func (p *YCbCr) ColorModel() color.Model
func (p *YCbCr) Opaque() bool
func (p *YCbCr) SubImage(r Rectangle) Image
func (p *YCbCr) YOffset(x, y int) int
func (s YCbCrSubsampleRatio) String() string

image/color
func RGBToYCbCr(r, g, b uint8) (uint8, uint8, uint8)
func YCbCrToRGB(y, cb, cr uint8) (uint8, uint8, uint8)
func (c Alpha) RGBA() (r, g, b, a uint32)
func (c Alpha16) RGBA() (r, g, b, a uint32)
func (c Gray) RGBA() (r, g, b, a uint32)
func (c Gray16) RGBA() (r, g, b, a uint32)
func ModelFunc(f func(Color) Color) Model
func (c NRGBA) RGBA() (r, g, b, a uint32)
func (c NRGBA64) RGBA() (r, g, b, a uint32)
func (p Palette) Convert(c Color) Color
func (p Palette) Index(c Color) int
func (c RGBA) RGBA() (r, g, b, a uint32)
func (c RGBA64) RGBA() (r, g, b, a uint32)
func (c YCbCr) RGBA() (uint32, uint32, uint32, uint32)

image/color/palette

image/draw
func Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point, op Op)
func DrawMask(dst Image, r image.Rectangle, src image.Image, sp image.Point, mask image.Image, mp image.Point, op Op)
func (op Op) Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)

image/gif
func Decode(r io.Reader) (image.Image, error)
func DecodeConfig(r io.Reader) (image.Config, error)
func Encode(w io.Writer, m image.Image, o *Options) error
func EncodeAll(w io.Writer, g *GIF) error
func DecodeAll(r io.Reader) (*GIF, error)

image/jpeg
func Decode(r io.Reader) (image.Image, error)
func DecodeConfig(r io.Reader) (image.Config, error)
func Encode(w io.Writer, m image.Image, o *Options) error
func (e FormatError) Error() string
func (e UnsupportedError) Error() string

image/png
func Decode(r io.Reader) (image.Image, error)
func DecodeConfig(r io.Reader) (image.Config, error)
func Encode(w io.Writer, m image.Image) error
func (e FormatError) Error() string
func (e UnsupportedError) Error() string

index/suffixarray
func New(data []byte) *Index
func (x *Index) Bytes() []byte
func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int)
func (x *Index) Lookup(s []byte, n int) (result []int)
func (x *Index) Read(r io.Reader) error
func (x *Index) Write(w io.Writer) error

io
func Copy(dst Writer, src Reader) (written int64, err error)
func CopyN(dst Writer, src Reader, n int64) (written int64, err error)
func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error)
func ReadFull(r Reader, buf []byte) (n int, err error)
func WriteString(w Writer, s string) (n int, err error)
func (l *LimitedReader) Read(p []byte) (n int, err error)
func Pipe() (*PipeReader, *PipeWriter)
func (r *PipeReader) Close() error
func (r *PipeReader) CloseWithError(err error) error
func (r *PipeReader) Read(data []byte) (n int, err error)
func (w *PipeWriter) Close() error
func (w *PipeWriter) CloseWithError(err error) error
func (w *PipeWriter) Write(data []byte) (n int, err error)
func LimitReader(r Reader, n int64) Reader
func MultiReader(readers ...Reader) Reader
func TeeReader(r Reader, w Writer) Reader
func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader
func (s *SectionReader) Read(p []byte) (n int, err error)
func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error)
func (s *SectionReader) Seek(offset int64, whence int) (int64, error)
func (s *SectionReader) Size() int64
func MultiWriter(writers ...Writer) Writer

io/ioutil
func NopCloser(r io.Reader) io.ReadCloser
func ReadAll(r io.Reader) ([]byte, error)
func ReadDir(dirname string) ([]os.FileInfo, error)
func ReadFile(filename string) ([]byte, error)
func TempDir(dir, prefix string) (name string, err error)
func TempFile(dir, prefix string) (f *os.File, err error)
func WriteFile(filename string, data []byte, perm os.FileMode) error

log
func Fatal(v ...interface{})
func Fatalf(format string, v ...interface{})
func Fatalln(v ...interface{})
func Flags() int
func Panic(v ...interface{})
func Panicf(format string, v ...interface{})
func Panicln(v ...interface{})
func Prefix() string
func Print(v ...interface{})
func Printf(format string, v ...interface{})
func Println(v ...interface{})
func SetFlags(flag int)
func SetOutput(w io.Writer)
func SetPrefix(prefix string)
func New(out io.Writer, prefix string, flag int) *Logger
func (l *Logger) Fatal(v ...interface{})
func (l *Logger) Fatalf(format string, v ...interface{})
func (l *Logger) Fatalln(v ...interface{})
func (l *Logger) Flags() int
func (l *Logger) Output(calldepth int, s string) error
func (l *Logger) Panic(v ...interface{})
func (l *Logger) Panicf(format string, v ...interface{})
func (l *Logger) Panicln(v ...interface{})
func (l *Logger) Prefix() string
func (l *Logger) Print(v ...interface{})
func (l *Logger) Printf(format string, v ...interface{})
func (l *Logger) Println(v ...interface{})
func (l *Logger) SetFlags(flag int)
func (l *Logger) SetPrefix(prefix string)

log/syslog

math
func Abs(x float64) float64
func Acos(x float64) float64
func Acosh(x float64) float64
func Asin(x float64) float64
func Asinh(x float64) float64
func Atan(x float64) float64
func Atan2(y, x float64) float64
func Atanh(x float64) float64
func Cbrt(x float64) float64
func Ceil(x float64) float64
func Copysign(x, y float64) float64
func Cos(x float64) float64
func Cosh(x float64) float64
func Dim(x, y float64) float64
func Erf(x float64) float64
func Erfc(x float64) float64
func Exp(x float64) float64
func Exp2(x float64) float64
func Expm1(x float64) float64
func Float32bits(f float32) uint32
func Float32frombits(b uint32) float32
func Float64bits(f float64) uint64
func Float64frombits(b uint64) float64
func Floor(x float64) float64
func Frexp(f float64) (frac float64, exp int)
func Gamma(x float64) float64
func Hypot(p, q float64) float64
func Ilogb(x float64) int
func Inf(sign int) float64
func IsInf(f float64, sign int) bool
func IsNaN(f float64) (is bool)
func J0(x float64) float64
func J1(x float64) float64
func Jn(n int, x float64) float64
func Ldexp(frac float64, exp int) float64
func Lgamma(x float64) (lgamma float64, sign int)
func Log(x float64) float64
func Log10(x float64) float64
func Log1p(x float64) float64
func Log2(x float64) float64
func Logb(x float64) float64
func Max(x, y float64) float64
func Min(x, y float64) float64
func Mod(x, y float64) float64
func Modf(f float64) (int float64, frac float64)
func NaN() float64
func Nextafter(x, y float64) (r float64)
func Pow(x, y float64) float64
func Pow10(e int) float64
func Remainder(x, y float64) float64
func Signbit(x float64) bool
func Sin(x float64) float64
func Sincos(x float64) (sin, cos float64)
func Sinh(x float64) float64
func Sqrt(x float64) float64
func Tan(x float64) float64
func Tanh(x float64) float64
func Trunc(x float64) float64
func Y0(x float64) float64
func Y1(x float64) float64
func Yn(n int, x float64) float64

math/big
func NewInt(x int64) *Int
func (z *Int) Abs(x *Int) *Int
func (z *Int) Add(x, y *Int) *Int
func (z *Int) And(x, y *Int) *Int
func (z *Int) AndNot(x, y *Int) *Int
func (z *Int) Binomial(n, k int64) *Int
func (x *Int) Bit(i int) uint
func (x *Int) BitLen() int
func (x *Int) Bits() []Word
func (x *Int) Bytes() []byte
func (x *Int) Cmp(y *Int) (r int)
func (z *Int) Div(x, y *Int) *Int
func (z *Int) DivMod(x, y, m *Int) (*Int, *Int)
func (z *Int) Exp(x, y, m *Int) *Int
func (x *Int) Format(s fmt.State, ch rune)
func (z *Int) GCD(x, y, a, b *Int) *Int
func (z *Int) GobDecode(buf []byte) error
func (x *Int) GobEncode() ([]byte, error)
func (x *Int) Int64() int64
func (z *Int) Lsh(x *Int, n uint) *Int
func (x *Int) MarshalJSON() ([]byte, error)
func (z *Int) Mod(x, y *Int) *Int
func (z *Int) ModInverse(g, p *Int) *Int
func (z *Int) Mul(x, y *Int) *Int
func (z *Int) MulRange(a, b int64) *Int
func (z *Int) Neg(x *Int) *Int
func (z *Int) Not(x *Int) *Int
func (z *Int) Or(x, y *Int) *Int
func (x *Int) ProbablyPrime(n int) bool
func (z *Int) Quo(x, y *Int) *Int
func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int)
func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int
func (z *Int) Rem(x, y *Int) *Int
func (z *Int) Rsh(x *Int, n uint) *Int
func (z *Int) Scan(s fmt.ScanState, ch rune) error
func (z *Int) Set(x *Int) *Int
func (z *Int) SetBit(x *Int, i int, b uint) *Int
func (z *Int) SetBits(abs []Word) *Int
func (z *Int) SetBytes(buf []byte) *Int
func (z *Int) SetInt64(x int64) *Int
func (z *Int) SetString(s string, base int) (*Int, bool)
func (z *Int) SetUint64(x uint64) *Int
func (x *Int) Sign() int
func (x *Int) String() string
func (z *Int) Sub(x, y *Int) *Int
func (x *Int) Uint64() uint64
func (z *Int) UnmarshalJSON(x []byte) error
func (z *Int) Xor(x, y *Int) *Int
func NewRat(a, b int64) *Rat
func (z *Rat) Abs(x *Rat) *Rat
func (z *Rat) Add(x, y *Rat) *Rat
func (x *Rat) Cmp(y *Rat) int
func (x *Rat) Denom() *Int
func (x *Rat) Float64() (f float64, exact bool)
func (x *Rat) FloatString(prec int) string
func (z *Rat) GobDecode(buf []byte) error
func (x *Rat) GobEncode() ([]byte, error)
func (z *Rat) Inv(x *Rat) *Rat
func (x *Rat) IsInt() bool
func (z *Rat) Mul(x, y *Rat) *Rat
func (z *Rat) Neg(x *Rat) *Rat
func (x *Rat) Num() *Int
func (z *Rat) Quo(x, y *Rat) *Rat
func (x *Rat) RatString() string
func (z *Rat) Scan(s fmt.ScanState, ch rune) error
func (z *Rat) Set(x *Rat) *Rat
func (z *Rat) SetFloat64(f float64) *Rat
func (z *Rat) SetFrac(a, b *Int) *Rat
func (z *Rat) SetFrac64(a, b int64) *Rat
func (z *Rat) SetInt(x *Int) *Rat
func (z *Rat) SetInt64(x int64) *Rat
func (z *Rat) SetString(s string) (*Rat, bool)
func (x *Rat) Sign() int
func (x *Rat) String() string
func (z *Rat) Sub(x, y *Rat) *Rat

math/cmplx
func Abs(x complex128) float64
func Acos(x complex128) complex128
func Acosh(x complex128) complex128
func Asin(x complex128) complex128
func Asinh(x complex128) complex128
func Atan(x complex128) complex128
func Atanh(x complex128) complex128
func Conj(x complex128) complex128
func Cos(x complex128) complex128
func Cosh(x complex128) complex128
func Cot(x complex128) complex128
func Exp(x complex128) complex128
func Inf() complex128
func IsInf(x complex128) bool
func IsNaN(x complex128) bool
func Log(x complex128) complex128
func Log10(x complex128) complex128
func NaN() complex128
func Phase(x complex128) float64
func Polar(x complex128) (r, θ float64)
func Pow(x, y complex128) complex128
func Rect(r, θ float64) complex128
func Sin(x complex128) complex128
func Sinh(x complex128) complex128
func Sqrt(x complex128) complex128
func Tan(x complex128) complex128
func Tanh(x complex128) complex128

math/rand
func ExpFloat64() float64
func Float32() float32
func Float64() float64
func Int() int
func Int31() int32
func Int31n(n int32) int32
func Int63() int64
func Int63n(n int64) int64
func Intn(n int) int
func NormFloat64() float64
func Perm(n int) []int
func Seed(seed int64)
func Uint32() uint32
func New(src Source) *Rand
func (r *Rand) ExpFloat64() float64
func (r *Rand) Float32() float32
func (r *Rand) Float64() float64
func (r *Rand) Int() int
func (r *Rand) Int31() int32
func (r *Rand) Int31n(n int32) int32
func (r *Rand) Int63() int64
func (r *Rand) Int63n(n int64) int64
func (r *Rand) Intn(n int) int
func (r *Rand) NormFloat64() float64
func (r *Rand) Perm(n int) []int
func (r *Rand) Seed(seed int64)
func (r *Rand) Uint32() uint32
func NewSource(seed int64) Source
func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf
func (z *Zipf) Uint64() uint64

mime
func AddExtensionType(ext, typ string) error
func FormatMediaType(t string, param map[string]string) string
func ParseMediaType(v string) (mediatype string, params map[string]string, err error)
func TypeByExtension(ext string) string

mime/multipart
func (fh *FileHeader) Open() (File, error)
func (f *Form) RemoveAll() error
func (p *Part) Close() error
func (p *Part) FileName() string
func (p *Part) FormName() string
func (p *Part) Read(d []byte) (n int, err error)
func NewReader(reader io.Reader, boundary string) *Reader
func (r *Reader) NextPart() (*Part, error)
func (r *Reader) ReadForm(maxMemory int64) (f *Form, err error)
func NewWriter(w io.Writer) *Writer
func (w *Writer) Boundary() string
func (w *Writer) Close() error
func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)
func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)
func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)
func (w *Writer) FormDataContentType() string
func (w *Writer) SetBoundary(boundary string) error
func (w *Writer) WriteField(fieldname, value string) error

net
func InterfaceAddrs() ([]Addr, error)
func Interfaces() ([]Interface, error)
func JoinHostPort(host, port string) string
func LookupAddr(addr string) (name []string, err error)
func LookupCNAME(name string) (cname string, err error)
func LookupHost(host string) (addrs []string, err error)
func LookupIP(host string) (addrs []IP, err error)
func LookupMX(name string) (mx []*MX, err error)
func LookupNS(name string) (ns []*NS, err error)
func LookupPort(network, service string) (port int, err error)
func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err error)
func LookupTXT(name string) (txt []string, err error)
func SplitHostPort(hostport string) (host, port string, err error)
func (e *AddrError) Error() string
func (e *AddrError) Temporary() bool
func (e *AddrError) Timeout() bool
func Dial(network, address string) (Conn, error)
func DialTimeout(network, address string, timeout time.Duration) (Conn, error)
func FileConn(f *os.File) (c Conn, err error)
func Pipe() (Conn, Conn)
func (e *DNSConfigError) Error() string
func (e *DNSConfigError) Temporary() bool
func (e *DNSConfigError) Timeout() bool
func (e *DNSError) Error() string
func (e *DNSError) Temporary() bool
func (e *DNSError) Timeout() bool
func (d *Dialer) Dial(network, address string) (Conn, error)
func (f Flags) String() string
func ParseMAC(s string) (hw HardwareAddr, err error)
func (a HardwareAddr) String() string
func IPv4(a, b, c, d byte) IP
func ParseCIDR(s string) (IP, *IPNet, error)
func ParseIP(s string) IP
func (ip IP) DefaultMask() IPMask
func (ip IP) Equal(x IP) bool
func (ip IP) IsGlobalUnicast() bool
func (ip IP) IsInterfaceLocalMulticast() bool
func (ip IP) IsLinkLocalMulticast() bool
func (ip IP) IsLinkLocalUnicast() bool
func (ip IP) IsLoopback() bool
func (ip IP) IsMulticast() bool
func (ip IP) IsUnspecified() bool
func (ip IP) MarshalText() ([]byte, error)
func (ip IP) Mask(mask IPMask) IP
func (ip IP) String() string
func (ip IP) To16() IP
func (ip IP) To4() IP
func (ip *IP) UnmarshalText(text []byte) error
func ResolveIPAddr(net, addr string) (*IPAddr, error)
func (a *IPAddr) Network() string
func (a *IPAddr) String() string
func DialIP(netProto string, laddr, raddr *IPAddr) (*IPConn, error)
func ListenIP(netProto string, laddr *IPAddr) (*IPConn, error)
func (c *IPConn) Close() error
func (c *IPConn) File() (f *os.File, err error)
func (c *IPConn) LocalAddr() Addr
func (c *IPConn) Read(b []byte) (int, error)
func (c *IPConn) ReadFrom(b []byte) (int, Addr, error)
func (c *IPConn) ReadFromIP(b []byte) (int, *IPAddr, error)
func (c *IPConn) ReadMsgIP(b, oob []byte) (n, oobn, flags int, addr *IPAddr, err error)
func (c *IPConn) RemoteAddr() Addr
func (c *IPConn) SetDeadline(t time.Time) error
func (c *IPConn) SetReadBuffer(bytes int) error
func (c *IPConn) SetReadDeadline(t time.Time) error
func (c *IPConn) SetWriteBuffer(bytes int) error
func (c *IPConn) SetWriteDeadline(t time.Time) error
func (c *IPConn) Write(b []byte) (int, error)
func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error)
func (c *IPConn) WriteTo(b []byte, addr Addr) (int, error)
func (c *IPConn) WriteToIP(b []byte, addr *IPAddr) (int, error)
func CIDRMask(ones, bits int) IPMask
func IPv4Mask(a, b, c, d byte) IPMask
func (m IPMask) Size() (ones, bits int)
func (m IPMask) String() string
func (n *IPNet) Contains(ip IP) bool
func (n *IPNet) Network() string
func (n *IPNet) String() string
func InterfaceByIndex(index int) (*Interface, error)
func InterfaceByName(name string) (*Interface, error)
func (ifi *Interface) Addrs() ([]Addr, error)
func (ifi *Interface) MulticastAddrs() ([]Addr, error)
func (e InvalidAddrError) Error() string
func (e InvalidAddrError) Temporary() bool
func (e InvalidAddrError) Timeout() bool
func FileListener(f *os.File) (l Listener, err error)
func Listen(net, laddr string) (Listener, error)
func (e *OpError) Error() string
func (e *OpError) Temporary() bool
func (e *OpError) Timeout() bool
func FilePacketConn(f *os.File) (c PacketConn, err error)
func ListenPacket(net, laddr string) (PacketConn, error)
func (e *ParseError) Error() string
func ResolveTCPAddr(net, addr string) (*TCPAddr, error)
func (a *TCPAddr) Network() string
func (a *TCPAddr) String() string
func DialTCP(net string, laddr, raddr *TCPAddr) (*TCPConn, error)
func (c *TCPConn) Close() error
func (c *TCPConn) CloseRead() error
func (c *TCPConn) CloseWrite() error
func (c *TCPConn) File() (f *os.File, err error)
func (c *TCPConn) LocalAddr() Addr
func (c *TCPConn) Read(b []byte) (int, error)
func (c *TCPConn) ReadFrom(r io.Reader) (int64, error)
func (c *TCPConn) RemoteAddr() Addr
func (c *TCPConn) SetDeadline(t time.Time) error
func (c *TCPConn) SetKeepAlive(keepalive bool) error
func (c *TCPConn) SetKeepAlivePeriod(d time.Duration) error
func (c *TCPConn) SetLinger(sec int) error
func (c *TCPConn) SetNoDelay(noDelay bool) error
func (c *TCPConn) SetReadBuffer(bytes int) error
func (c *TCPConn) SetReadDeadline(t time.Time) error
func (c *TCPConn) SetWriteBuffer(bytes int) error
func (c *TCPConn) SetWriteDeadline(t time.Time) error
func (c *TCPConn) Write(b []byte) (int, error)
func ListenTCP(net string, laddr *TCPAddr) (*TCPListener, error)
func (l *TCPListener) Accept() (Conn, error)
func (l *TCPListener) AcceptTCP() (*TCPConn, error)
func (l *TCPListener) Addr() Addr
func (l *TCPListener) Close() error
func (l *TCPListener) File() (f *os.File, err error)
func (l *TCPListener) SetDeadline(t time.Time) error
func ResolveUDPAddr(net, addr string) (*UDPAddr, error)
func (a *UDPAddr) Network() string
func (a *UDPAddr) String() string
func DialUDP(net string, laddr, raddr *UDPAddr) (*UDPConn, error)
func ListenMulticastUDP(net string, ifi *Interface, gaddr *UDPAddr) (*UDPConn, error)
func ListenUDP(net string, laddr *UDPAddr) (*UDPConn, error)
func (c *UDPConn) Close() error
func (c *UDPConn) File() (f *os.File, err error)
func (c *UDPConn) LocalAddr() Addr
func (c *UDPConn) Read(b []byte) (int, error)
func (c *UDPConn) ReadFrom(b []byte) (int, Addr, error)
func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err error)
func (c *UDPConn) ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr *UDPAddr, err error)
func (c *UDPConn) RemoteAddr() Addr
func (c *UDPConn) SetDeadline(t time.Time) error
func (c *UDPConn) SetReadBuffer(bytes int) error
func (c *UDPConn) SetReadDeadline(t time.Time) error
func (c *UDPConn) SetWriteBuffer(bytes int) error
func (c *UDPConn) SetWriteDeadline(t time.Time) error
func (c *UDPConn) Write(b []byte) (int, error)
func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int, err error)
func (c *UDPConn) WriteTo(b []byte, addr Addr) (int, error)
func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (int, error)
func ResolveUnixAddr(net, addr string) (*UnixAddr, error)
func (a *UnixAddr) Network() string
func (a *UnixAddr) String() string
func DialUnix(net string, laddr, raddr *UnixAddr) (*UnixConn, error)
func ListenUnixgram(net string, laddr *UnixAddr) (*UnixConn, error)
func (c *UnixConn) Close() error
func (c *UnixConn) CloseRead() error
func (c *UnixConn) CloseWrite() error
func (c *UnixConn) File() (f *os.File, err error)
func (c *UnixConn) LocalAddr() Addr
func (c *UnixConn) Read(b []byte) (int, error)
func (c *UnixConn) ReadFrom(b []byte) (int, Addr, error)
func (c *UnixConn) ReadFromUnix(b []byte) (n int, addr *UnixAddr, err error)
func (c *UnixConn) ReadMsgUnix(b, oob []byte) (n, oobn, flags int, addr *UnixAddr, err error)
func (c *UnixConn) RemoteAddr() Addr
func (c *UnixConn) SetDeadline(t time.Time) error
func (c *UnixConn) SetReadBuffer(bytes int) error
func (c *UnixConn) SetReadDeadline(t time.Time) error
func (c *UnixConn) SetWriteBuffer(bytes int) error
func (c *UnixConn) SetWriteDeadline(t time.Time) error
func (c *UnixConn) Write(b []byte) (int, error)
func (c *UnixConn) WriteMsgUnix(b, oob []byte, addr *UnixAddr) (n, oobn int, err error)
func (c *UnixConn) WriteTo(b []byte, addr Addr) (n int, err error)
func (c *UnixConn) WriteToUnix(b []byte, addr *UnixAddr) (n int, err error)
func ListenUnix(net string, laddr *UnixAddr) (*UnixListener, error)
func (l *UnixListener) Accept() (c Conn, err error)
func (l *UnixListener) AcceptUnix() (*UnixConn, error)
func (l *UnixListener) Addr() Addr
func (l *UnixListener) Close() error
func (l *UnixListener) File() (f *os.File, err error)
func (l *UnixListener) SetDeadline(t time.Time) (err error)
func (e UnknownNetworkError) Error() string
func (e UnknownNetworkError) Temporary() bool
func (e UnknownNetworkError) Timeout() bool
net/http
func CanonicalHeaderKey(s string) string
func DetectContentType(data []byte) string
func Error(w ResponseWriter, error string, code int)
func Handle(pattern string, handler Handler)
func HandleFunc(pattern string, handler func(ResponseWriter, *Request))
func ListenAndServe(addr string, handler Handler) error
func ListenAndServeTLS(addr string, certFile string, keyFile string, handler Handler) error
func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser
func NotFound(w ResponseWriter, r *Request)
func ParseHTTPVersion(vers string) (major, minor int, ok bool)
func ParseTime(text string) (t time.Time, err error)
func ProxyFromEnvironment(req *Request) (*url.URL, error)
func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)
func Redirect(w ResponseWriter, r *Request, urlStr string, code int)
func Serve(l net.Listener, handler Handler) error
func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)
func ServeFile(w ResponseWriter, r *Request, name string)
func SetCookie(w ResponseWriter, cookie *Cookie)
func StatusText(code int) string
func (c *Client) Do(req *Request) (resp *Response, err error)
func (c *Client) Get(url string) (resp *Response, err error)
func (c *Client) Head(url string) (resp *Response, err error)
func (c *Client) Post(url string, bodyType string, body io.Reader) (resp *Response, err error)
func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error)
func (c *Cookie) String() string
func (d Dir) Open(name string) (File, error)
func FileServer(root FileSystem) Handler
func NotFoundHandler() Handler
func RedirectHandler(url string, code int) Handler
func StripPrefix(prefix string, h Handler) Handler
func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)
func (h Header) Add(key, value string)
func (h Header) Del(key string)
func (h Header) Get(key string) string
func (h Header) Set(key, value string)
func (h Header) Write(w io.Writer) error
func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error
func (err *ProtocolError) Error() string
func NewRequest(method, urlStr string, body io.Reader) (*Request, error)
func ReadRequest(b *bufio.Reader) (req *Request, err error)
func (r *Request) AddCookie(c *Cookie)
func (r *Request) Cookie(name string) (*Cookie, error)
func (r *Request) Cookies() []*Cookie
func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)
func (r *Request) FormValue(key string) string
func (r *Request) MultipartReader() (*multipart.Reader, error)
func (r *Request) ParseForm() error
func (r *Request) ParseMultipartForm(maxMemory int64) error
func (r *Request) PostFormValue(key string) string
func (r *Request) ProtoAtLeast(major, minor int) bool
func (r *Request) Referer() string
func (r *Request) SetBasicAuth(username, password string)
func (r *Request) UserAgent() string
func (r *Request) Write(w io.Writer) error
func (r *Request) WriteProxy(w io.Writer) error
func Get(url string) (resp *Response, err error)
func Head(url string) (resp *Response, err error)
func Post(url string, bodyType string, body io.Reader) (resp *Response, err error)
func PostForm(url string, data url.Values) (resp *Response, err error)
func ReadResponse(r *bufio.Reader, req *Request) (*Response, error)
func (r *Response) Cookies() []*Cookie
func (r *Response) Location() (*url.URL, error)
func (r *Response) ProtoAtLeast(major, minor int) bool
func (r *Response) Write(w io.Writer) error
func NewFileTransport(fs FileSystem) RoundTripper
func NewServeMux() *ServeMux
func (mux *ServeMux) Handle(pattern string, handler Handler)
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))
func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)
func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)
func (srv *Server) ListenAndServe() error
func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error
func (srv *Server) Serve(l net.Listener) error
func (t *Transport) CancelRequest(req *Request)
func (t *Transport) CloseIdleConnections()
func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)
func (t *Transport) RoundTrip(req *Request) (resp *Response, err error)
net/http/cgi
func Request() (*http.Request, error)
func RequestFromMap(params map[string]string) (*http.Request, error)
func Serve(handler http.Handler) error
func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)
net/http/cookiejar
func New(o *Options) (*Jar, error)
func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)
func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)
net/http/fcgi
func Serve(l net.Listener, handler http.Handler) error
net/http/httptest
func NewRecorder() *ResponseRecorder
func (rw *ResponseRecorder) Flush()
func (rw *ResponseRecorder) Header() http.Header
func (rw *ResponseRecorder) Write(buf []byte) (int, error)
func (rw *ResponseRecorder) WriteHeader(code int)
func NewServer(handler http.Handler) *Server
func NewTLSServer(handler http.Handler) *Server
func NewUnstartedServer(handler http.Handler) *Server
func (s *Server) Close()
func (s *Server) CloseClientConnections()
func (s *Server) Start()
func (s *Server) StartTLS()
net/http/httputil
func DumpRequest(req *http.Request, body bool) (dump []byte, err error)
func DumpRequestOut(req *http.Request, body bool) ([]byte, error)
func DumpResponse(resp *http.Response, body bool) (dump []byte, err error)
func NewChunkedReader(r io.Reader) io.Reader
func NewChunkedWriter(w io.Writer) io.WriteCloser
func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn
func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn
func (cc *ClientConn) Close() error
func (cc *ClientConn) Do(req *http.Request) (resp *http.Response, err error)
func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader)
func (cc *ClientConn) Pending() int
func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error)
func (cc *ClientConn) Write(req *http.Request) (err error)
func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy
func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)
func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn
func (sc *ServerConn) Close() error
func (sc *ServerConn) Hijack() (c net.Conn, r *bufio.Reader)
func (sc *ServerConn) Pending() int
func (sc *ServerConn) Read() (req *http.Request, err error)
func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error
net/http/pprof
func Cmdline(w http.ResponseWriter, r *http.Request)
func Handler(name string) http.Handler
func Index(w http.ResponseWriter, r *http.Request)
func Profile(w http.ResponseWriter, r *http.Request)
func Symbol(w http.ResponseWriter, r *http.Request)
net/mail
func ParseAddressList(list string) ([]*Address, error)
func ParseAddress(address string) (*Address, error)
func (a *Address) String() string
func (h Header) AddressList(key string) ([]*Address, error)
func (h Header) Date() (time.Time, error)
func (h Header) Get(key string) string
func ReadMessage(r io.Reader) (msg *Message, err error)
net/rpc
func Accept(lis net.Listener)
func HandleHTTP()
func Register(rcvr interface{}) error
func RegisterName(name string, rcvr interface{}) error
func ServeCodec(codec ServerCodec)
func ServeConn(conn io.ReadWriteCloser)
func ServeRequest(codec ServerCodec) error
func Dial(network, address string) (*Client, error)
func DialHTTP(network, address string) (*Client, error)
func DialHTTPPath(network, address, path string) (*Client, error)
func NewClient(conn io.ReadWriteCloser) *Client
func NewClientWithCodec(codec ClientCodec) *Client
func (client *Client) Call(serviceMethod string, args interface{}, reply interface{}) error
func (client *Client) Close() error
func (client *Client) Go(serviceMethod string, args interface{}, reply interface{}, done chan *Call) *Call
func NewServer() *Server
func (server *Server) Accept(lis net.Listener)
func (server *Server) HandleHTTP(rpcPath, debugPath string)
func (server *Server) Register(rcvr interface{}) error
func (server *Server) RegisterName(name string, rcvr interface{}) error
func (server *Server) ServeCodec(codec ServerCodec)
func (server *Server) ServeConn(conn io.ReadWriteCloser)
func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request)
func (server *Server) ServeRequest(codec ServerCodec) error
func (e ServerError) Error() string
net/rpc/jsonrpc
func Dial(network, address string) (*rpc.Client, error)
func NewClient(conn io.ReadWriteCloser) *rpc.Client
func NewClientCodec(conn io.ReadWriteCloser) rpc.ClientCodec
func NewServerCodec(conn io.ReadWriteCloser) rpc.ServerCodec
func ServeConn(conn io.ReadWriteCloser)
net/smtp
func SendMail(addr string, a Auth, from string, to []string, msg []byte) error
func CRAMMD5Auth(username, secret string) Auth
func PlainAuth(identity, username, password, host string) Auth
func Dial(addr string) (*Client, error)
func NewClient(conn net.Conn, host string) (*Client, error)
func (c *Client) Auth(a Auth) error
func (c *Client) Close() error
func (c *Client) Data() (io.WriteCloser, error)
func (c *Client) Extension(ext string) (bool, string)
func (c *Client) Hello(localName string) error
func (c *Client) Mail(from string) error
func (c *Client) Quit() error
func (c *Client) Rcpt(to string) error
func (c *Client) Reset() error
func (c *Client) StartTLS(config *tls.Config) error
func (c *Client) Verify(addr string) error
net/textproto
func CanonicalMIMEHeaderKey(s string) string
func TrimBytes(b []byte) []byte
func TrimString(s string) string
func Dial(network, addr string) (*Conn, error)
func NewConn(conn io.ReadWriteCloser) *Conn
func (c *Conn) Close() error
func (c *Conn) Cmd(format string, args ...interface{}) (id uint, err error)
func (e *Error) Error() string
func (h MIMEHeader) Add(key, value string)
func (h MIMEHeader) Del(key string)
func (h MIMEHeader) Get(key string) string
func (h MIMEHeader) Set(key, value string)
func (p *Pipeline) EndRequest(id uint)
func (p *Pipeline) EndResponse(id uint)
func (p *Pipeline) Next() uint
func (p *Pipeline) StartRequest(id uint)
func (p *Pipeline) StartResponse(id uint)
func (p ProtocolError) Error() string
func NewReader(r *bufio.Reader) *Reader
func (r *Reader) DotReader() io.Reader
func (r *Reader) ReadCodeLine(expectCode int) (code int, message string, err error)
func (r *Reader) ReadContinuedLine() (string, error)
func (r *Reader) ReadContinuedLineBytes() ([]byte, error)
func (r *Reader) ReadDotBytes() ([]byte, error)
func (r *Reader) ReadDotLines() ([]string, error)
func (r *Reader) ReadLine() (string, error)
func (r *Reader) ReadLineBytes() ([]byte, error)
func (r *Reader) ReadMIMEHeader() (MIMEHeader, error)
func (r *Reader) ReadResponse(expectCode int) (code int, message string, err error)
func NewWriter(w *bufio.Writer) *Writer
func (w *Writer) DotWriter() io.WriteCloser
func (w *Writer) PrintfLine(format string, args ...interface{}) error
net/url
func QueryEscape(s string) string
func QueryUnescape(s string) (string, error)
func (e *Error) Error() string
func (e EscapeError) Error() string
func Parse(rawurl string) (url *URL, err error)
func ParseRequestURI(rawurl string) (url *URL, err error)
func (u *URL) IsAbs() bool
func (u *URL) Parse(ref string) (*URL, error)
func (u *URL) Query() Values
func (u *URL) RequestURI() string
func (u *URL) ResolveReference(ref *URL) *URL
func (u *URL) String() string
func User(username string) *Userinfo
func UserPassword(username, password string) *Userinfo
func (u *Userinfo) Password() (string, bool)
func (u *Userinfo) String() string
func (u *Userinfo) Username() string
func ParseQuery(query string) (m Values, err error)
func (v Values) Add(key, value string)
func (v Values) Del(key string)
func (v Values) Encode() string
func (v Values) Get(key string) string
func (v Values) Set(key, value string)

os
func Chdir(dir string) error
func Chmod(name string, mode FileMode) error
func Chown(name string, uid, gid int) error
func Chtimes(name string, atime time.Time, mtime time.Time) error
func Clearenv()
func Environ() []string
func Exit(code int)
func Expand(s string, mapping func(string) string) string
func ExpandEnv(s string) string
func Getegid() int
func Getenv(key string) string
func Geteuid() int
func Getgid() int
func Getgroups() ([]int, error)
func Getpagesize() int
func Getpid() int
func Getppid() int
func Getuid() int
func Getwd() (pwd string, err error)
func Hostname() (name string, err error)
func IsExist(err error) bool
func IsNotExist(err error) bool
func IsPathSeparator(c uint8) bool
func IsPermission(err error) bool
func Lchown(name string, uid, gid int) error
func Link(oldname, newname string) error
func Mkdir(name string, perm FileMode) error
func MkdirAll(path string, perm FileMode) error
func NewSyscallError(syscall string, err error) error
func Readlink(name string) (string, error)
func Remove(name string) error
func RemoveAll(path string) error
func Rename(oldname, newname string) error
func SameFile(fi1, fi2 FileInfo) bool
func Setenv(key, value string) error
func Symlink(oldname, newname string) error
func TempDir() string
func Truncate(name string, size int64) error
func Create(name string) (file *File, err error)
func NewFile(fd uintptr, name string) *File
func Open(name string) (file *File, err error)
func OpenFile(name string, flag int, perm FileMode) (file *File, err error)
func Pipe() (r *File, w *File, err error)
func (f *File) Chdir() error
func (f *File) Chmod(mode FileMode) error
func (f *File) Chown(uid, gid int) error
func (file *File) Close() error
func (file *File) Fd() uintptr
func (f *File) Name() string
func (f *File) Read(b []byte) (n int, err error)
func (f *File) ReadAt(b []byte, off int64) (n int, err error)
func (f *File) Readdir(n int) (fi []FileInfo, err error)
func (f *File) Readdirnames(n int) (names []string, err error)
func (f *File) Seek(offset int64, whence int) (ret int64, err error)
func (file *File) Stat() (fi FileInfo, err error)
func (f *File) Sync() (err error)
func (f *File) Truncate(size int64) error
func (f *File) Write(b []byte) (n int, err error)
func (f *File) WriteAt(b []byte, off int64) (n int, err error)
func (f *File) WriteString(s string) (ret int, err error)
func Lstat(name string) (fi FileInfo, err error)
func Stat(name string) (fi FileInfo, err error)
func (m FileMode) IsDir() bool
func (m FileMode) IsRegular() bool
func (m FileMode) Perm() FileMode
func (m FileMode) String() string
func (e *LinkError) Error() string
func (e *PathError) Error() string
func FindProcess(pid int) (p *Process, err error)
func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error)
func (p *Process) Kill() error
func (p *Process) Release() error
func (p *Process) Signal(sig Signal) error
func (p *Process) Wait() (*ProcessState, error)
func (p *ProcessState) Exited() bool
func (p *ProcessState) Pid() int
func (p *ProcessState) String() string
func (p *ProcessState) Success() bool
func (p *ProcessState) Sys() interface{}
func (p *ProcessState) SysUsage() interface{}
func (p *ProcessState) SystemTime() time.Duration
func (p *ProcessState) UserTime() time.Duration
func (e *SyscallError) Error() string

os/exec
func LookPath(file string) (f string, err error)
func Command(name string, arg ...string) *Cmd
func (c *Cmd) CombinedOutput() ([]byte, error)
func (c *Cmd) Output() ([]byte, error)
func (c *Cmd) Run() error
func (c *Cmd) Start() error
func (c *Cmd) StderrPipe() (io.ReadCloser, error)
func (c *Cmd) StdinPipe() (io.WriteCloser, error)
func (c *Cmd) StdoutPipe() (io.ReadCloser, error)
func (c *Cmd) Wait() error
func (e *Error) Error() string
func (e *ExitError) Error() string

os/signal
func Notify(c chan<- os.Signal, sig ...os.Signal)
func Stop(c chan<- os.Signal)

os/user
func (e UnknownUserError) Error() string
func (e UnknownUserIdError) Error() string
func Current() (*User, error)
func Lookup(username string) (*User, error)
func LookupId(uid string) (*User, error)

path
func Base(path string) string
func Clean(path string) string
func Dir(path string) string
func Ext(path string) string
func IsAbs(path string) bool
func Join(elem ...string) string
func Match(pattern, name string) (matched bool, err error)
func Split(path string) (dir, file string)

path/filepath
func Abs(path string) (string, error)
func Base(path string) string
func Clean(path string) string
func Dir(path string) string
func EvalSymlinks(path string) (string, error)
func Ext(path string) string
func FromSlash(path string) string
func Glob(pattern string) (matches []string, err error)
func HasPrefix(p, prefix string) bool
func IsAbs(path string) (b bool)
func Join(elem ...string) string
func Match(pattern, name string) (matched bool, err error)
func Rel(basepath, targpath string) (string, error)
func Split(path string) (dir, file string)
func SplitList(path string) []string
func ToSlash(path string) string
func VolumeName(path string) (v string)
func Walk(root string, walkFn WalkFunc) error

reflect
func Copy(dst, src Value) int
func DeepEqual(a1, a2 interface{}) bool
func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)
func (d ChanDir) String() string
func (k Kind) String() string
func (tag StructTag) Get(key string) string
func ChanOf(dir ChanDir, t Type) Type
func MapOf(key, elem Type) Type
func PtrTo(t Type) Type
func SliceOf(t Type) Type
func TypeOf(i interface{}) Type
func Append(s Value, x ...Value) Value
func AppendSlice(s, t Value) Value
func Indirect(v Value) Value
func MakeChan(typ Type, buffer int) Value
func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value
func MakeMap(typ Type) Value
func MakeSlice(typ Type, len, cap int) Value
func New(typ Type) Value
func NewAt(typ Type, p unsafe.Pointer) Value
func ValueOf(i interface{}) Value
func Zero(typ Type) Value
func (v Value) Addr() Value
func (v Value) Bool() bool
func (v Value) Bytes() []byte
func (v Value) Call(in []Value) []Value
func (v Value) CallSlice(in []Value) []Value
func (v Value) CanAddr() bool
func (v Value) CanInterface() bool
func (v Value) CanSet() bool
func (v Value) Cap() int
func (v Value) Close()
func (v Value) Complex() complex128
func (v Value) Convert(t Type) Value
func (v Value) Elem() Value
func (v Value) Field(i int) Value
func (v Value) FieldByIndex(index []int) Value
func (v Value) FieldByName(name string) Value
func (v Value) FieldByNameFunc(match func(string) bool) Value
func (v Value) Float() float64
func (v Value) Index(i int) Value
func (v Value) Int() int64
func (v Value) Interface() (i interface{})
func (v Value) InterfaceData() [2]uintptr
func (v Value) IsNil() bool
func (v Value) IsValid() bool
func (v Value) Kind() Kind
func (v Value) Len() int
func (v Value) MapIndex(key Value) Value
func (v Value) MapKeys() []Value
func (v Value) Method(i int) Value
func (v Value) MethodByName(name string) Value
func (v Value) NumField() int
func (v Value) NumMethod() int
func (v Value) OverflowComplex(x complex128) bool
func (v Value) OverflowFloat(x float64) bool
func (v Value) OverflowInt(x int64) bool
func (v Value) OverflowUint(x uint64) bool
func (v Value) Pointer() uintptr
func (v Value) Recv() (x Value, ok bool)
func (v Value) Send(x Value)
func (v Value) Set(x Value)
func (v Value) SetBool(x bool)
func (v Value) SetBytes(x []byte)
func (v Value) SetCap(n int)
func (v Value) SetComplex(x complex128)
func (v Value) SetFloat(x float64)
func (v Value) SetInt(x int64)
func (v Value) SetLen(n int)
func (v Value) SetMapIndex(key, val Value)
func (v Value) SetPointer(x unsafe.Pointer)
func (v Value) SetString(x string)
func (v Value) SetUint(x uint64)
func (v Value) Slice(i, j int) Value
func (v Value) Slice3(i, j, k int) Value
func (v Value) String() string
func (v Value) TryRecv() (x Value, ok bool)
func (v Value) TrySend(x Value) bool
func (v Value) Type() Type
func (v Value) Uint() uint64
func (v Value) UnsafeAddr() uintptr
func (e *ValueError) Error() string

regexp
func Match(pattern string, b []byte) (matched bool, err error)
func MatchReader(pattern string, r io.RuneReader) (matched bool, err error)
func MatchString(pattern string, s string) (matched bool, err error)
func QuoteMeta(s string) string
func Compile(expr string) (*Regexp, error)
func CompilePOSIX(expr string) (*Regexp, error)
func MustCompile(str string) *Regexp
func MustCompilePOSIX(str string) *Regexp
func (re *Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte
func (re *Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte
func (re *Regexp) Find(b []byte) []byte
func (re *Regexp) FindAll(b []byte, n int) [][]byte
func (re *Regexp) FindAllIndex(b []byte, n int) [][]int
func (re *Regexp) FindAllString(s string, n int) []string
func (re *Regexp) FindAllStringIndex(s string, n int) [][]int
func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string
func (re *Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int
func (re *Regexp) FindAllSubmatch(b []byte, n int) [][][]byte
func (re *Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int
func (re *Regexp) FindIndex(b []byte) (loc []int)
func (re *Regexp) FindReaderIndex(r io.RuneReader) (loc []int)
func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int
func (re *Regexp) FindString(s string) string
func (re *Regexp) FindStringIndex(s string) (loc []int)
func (re *Regexp) FindStringSubmatch(s string) []string
func (re *Regexp) FindStringSubmatchIndex(s string) []int
func (re *Regexp) FindSubmatch(b []byte) [][]byte
func (re *Regexp) FindSubmatchIndex(b []byte) []int
func (re *Regexp) LiteralPrefix() (prefix string, complete bool)
func (re *Regexp) Longest()
func (re *Regexp) Match(b []byte) bool
func (re *Regexp) MatchReader(r io.RuneReader) bool
func (re *Regexp) MatchString(s string) bool
func (re *Regexp) NumSubexp() int
func (re *Regexp) ReplaceAll(src, repl []byte) []byte
func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte
func (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte
func (re *Regexp) ReplaceAllLiteralString(src, repl string) string
func (re *Regexp) ReplaceAllString(src, repl string) string
func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string
func (re *Regexp) Split(s string, n int) []string
func (re *Regexp) String() string
func (re *Regexp) SubexpNames() []string

regexp/syntax
func IsWordChar(r rune) bool
func EmptyOpContext(r1, r2 rune) EmptyOp
func (e *Error) Error() string
func (e ErrorCode) String() string
func (i *Inst) MatchEmptyWidth(before rune, after rune) bool
func (i *Inst) MatchRune(r rune) bool
func (i *Inst) String() string
func Compile(re *Regexp) (*Prog, error)
func (p *Prog) Prefix() (prefix string, complete bool)
func (p *Prog) StartCond() EmptyOp
func (p *Prog) String() string
func Parse(s string, flags Flags) (*Regexp, error)
func (re *Regexp) CapNames() []string
func (x *Regexp) Equal(y *Regexp) bool
func (re *Regexp) MaxCap() int
func (re *Regexp) Simplify() *Regexp
func (re *Regexp) String() string

runtime
func BlockProfile(p []BlockProfileRecord) (n int, ok bool)
func Breakpoint()
func CPUProfile() []byte
func Caller(skip int) (pc uintptr, file string, line int, ok bool)
func Callers(skip int, pc []uintptr) int
func GC()
func GOMAXPROCS(n int) int
func GOROOT() string
func Goexit()
func GoroutineProfile(p []StackRecord) (n int, ok bool)
func Gosched()
func LockOSThread()
func MemProfile(p []MemProfileRecord, inuseZero bool) (n int, ok bool)
func NumCPU() int
func NumCgoCall() int64
func NumGoroutine() int
func ReadMemStats(m *MemStats)
func SetBlockProfileRate(rate int)
func SetCPUProfileRate(hz int)
func SetFinalizer(x, f interface{})
func Stack(buf []byte, all bool) int
func ThreadCreateProfile(p []StackRecord) (n int, ok bool)
func UnlockOSThread()
func Version() string
func FuncForPC(pc uintptr) *Func
func (f *Func) Entry() uintptr
func (f *Func) FileLine(pc uintptr) (file string, line int)
func (f *Func) Name() string
func (r *MemProfileRecord) InUseBytes() int64
func (r *MemProfileRecord) InUseObjects() int64
func (r *MemProfileRecord) Stack() []uintptr
func (r *StackRecord) Stack() []uintptr
func (e *TypeAssertionError) Error() string
func (*TypeAssertionError) RuntimeError()

runtime/cgo

runtime/debug
func FreeOSMemory()
func PrintStack()
func ReadGCStats(stats *GCStats)
func SetGCPercent(percent int) int
func SetMaxStack(bytes int) int
func SetMaxThreads(threads int) int
func Stack() []byte

runtime/pprof
func Profiles() []*Profile
func StartCPUProfile(w io.Writer) error
func StopCPUProfile()
func WriteHeapProfile(w io.Writer) error
func Lookup(name string) *Profile
func NewProfile(name string) *Profile
func (p *Profile) Add(value interface{}, skip int)
func (p *Profile) Count() int
func (p *Profile) Name() string
func (p *Profile) Remove(value interface{})
func (p *Profile) WriteTo(w io.Writer, debug int) error

runtime/race

sort
func Float64s(a []float64)
func Float64sAreSorted(a []float64) bool
func Ints(a []int)
func IntsAreSorted(a []int) bool
func IsSorted(data Interface) bool
func Search(n int, f func(int) bool) int
func SearchFloat64s(a []float64, x float64) int
func SearchInts(a []int, x int) int
func SearchStrings(a []string, x string) int
func Sort(data Interface)
func Stable(data Interface)
func Strings(a []string)
func StringsAreSorted(a []string) bool
func (p Float64Slice) Len() int
func (p Float64Slice) Less(i, j int) bool
func (p Float64Slice) Search(x float64) int
func (p Float64Slice) Sort()
func (p Float64Slice) Swap(i, j int)
func (p IntSlice) Len() int
func (p IntSlice) Less(i, j int) bool
func (p IntSlice) Search(x int) int
func (p IntSlice) Sort()
func (p IntSlice) Swap(i, j int)
func Reverse(data Interface) Interface
func (p StringSlice) Len() int
func (p StringSlice) Less(i, j int) bool
func (p StringSlice) Search(x string) int
func (p StringSlice) Sort()
func (p StringSlice) Swap(i, j int)

strconv
func AppendBool(dst []byte, b bool) []byte
func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte
func AppendInt(dst []byte, i int64, base int) []byte
func AppendQuote(dst []byte, s string) []byte
func AppendQuoteRune(dst []byte, r rune) []byte
func AppendQuoteRuneToASCII(dst []byte, r rune) []byte
func AppendQuoteToASCII(dst []byte, s string) []byte
func AppendUint(dst []byte, i uint64, base int) []byte
func Atoi(s string) (i int, err error)
func CanBackquote(s string) bool
func FormatBool(b bool) string
func FormatFloat(f float64, fmt byte, prec, bitSize int) string
func FormatInt(i int64, base int) string
func FormatUint(i uint64, base int) string
func IsPrint(r rune) bool
func Itoa(i int) string
func ParseBool(str string) (value bool, err error)
func ParseFloat(s string, bitSize int) (f float64, err error)
func ParseInt(s string, base int, bitSize int) (i int64, err error)
func ParseUint(s string, base int, bitSize int) (n uint64, err error)
func Quote(s string) string
func QuoteRune(r rune) string
func QuoteRuneToASCII(r rune) string
func QuoteToASCII(s string) string
func Unquote(s string) (t string, err error)
func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)
func (e *NumError) Error() string

strings
func Contains(s, substr string) bool
func ContainsAny(s, chars string) bool
func ContainsRune(s string, r rune) bool
func Count(s, sep string) int
func EqualFold(s, t string) bool
func Fields(s string) []string
func FieldsFunc(s string, f func(rune) bool) []string
func HasPrefix(s, prefix string) bool
func HasSuffix(s, suffix string) bool
func Index(s, sep string) int
func IndexAny(s, chars string) int
func IndexByte(s string, c byte) int
func IndexFunc(s string, f func(rune) bool) int
func IndexRune(s string, r rune) int
func Join(a []string, sep string) string
func LastIndex(s, sep string) int
func LastIndexAny(s, chars string) int
func LastIndexFunc(s string, f func(rune) bool) int
func Map(mapping func(rune) rune, s string) string
func Repeat(s string, count int) string
func Replace(s, old, new string, n int) string
func Split(s, sep string) []string
func SplitAfter(s, sep string) []string
func SplitAfterN(s, sep string, n int) []string
func SplitN(s, sep string, n int) []string
func Title(s string) string
func ToLower(s string) string
func ToLowerSpecial(_case unicode.SpecialCase, s string) string
func ToTitle(s string) string
func ToTitleSpecial(_case unicode.SpecialCase, s string) string
func ToUpper(s string) string
func ToUpperSpecial(_case unicode.SpecialCase, s string) string
func Trim(s string, cutset string) string
func TrimFunc(s string, f func(rune) bool) string
func TrimLeft(s string, cutset string) string
func TrimLeftFunc(s string, f func(rune) bool) string
func TrimPrefix(s, prefix string) string
func TrimRight(s string, cutset string) string
func TrimRightFunc(s string, f func(rune) bool) string
func TrimSpace(s string) string
func TrimSuffix(s, suffix string) string
func NewReader(s string) *Reader
func (r *Reader) Len() int
func (r *Reader) Read(b []byte) (n int, err error)
func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)
func (r *Reader) ReadByte() (b byte, err error)
func (r *Reader) ReadRune() (ch rune, size int, err error)
func (r *Reader) Seek(offset int64, whence int) (int64, error)
func (r *Reader) UnreadByte() error
func (r *Reader) UnreadRune() error
func (r *Reader) WriteTo(w io.Writer) (n int64, err error)
func NewReplacer(oldnew ...string) *Replacer
func (r *Replacer) Replace(s string) string
func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error)

sync
func NewCond(l Locker) *Cond
func (c *Cond) Broadcast()
func (c *Cond) Signal()
func (c *Cond) Wait()
func (m *Mutex) Lock()
func (m *Mutex) Unlock()
func (o *Once) Do(f func())
func (rw *RWMutex) Lock()
func (rw *RWMutex) RLock()
func (rw *RWMutex) RLocker() Locker
func (rw *RWMutex) RUnlock()
func (rw *RWMutex) Unlock()
func (wg *WaitGroup) Add(delta int)
func (wg *WaitGroup) Done()
func (wg *WaitGroup) Wait()

sync/atomic
func AddInt32(addr *int32, delta int32) (new int32)
func AddInt64(addr *int64, delta int64) (new int64)
func AddUint32(addr *uint32, delta uint32) (new uint32)
func AddUint64(addr *uint64, delta uint64) (new uint64)
func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)
func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)
func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)
func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)
func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)
func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)
func LoadInt32(addr *int32) (val int32)
func LoadInt64(addr *int64) (val int64)
func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
func LoadUint32(addr *uint32) (val uint32)
func LoadUint64(addr *uint64) (val uint64)
func LoadUintptr(addr *uintptr) (val uintptr)
func StoreInt32(addr *int32, val int32)
func StoreInt64(addr *int64, val int64)
func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
func StoreUint32(addr *uint32, val uint32)
func StoreUint64(addr *uint64, val uint64)
func StoreUintptr(addr *uintptr, val uintptr)
func SwapInt32(addr *int32, new int32) (old int32)
func SwapInt64(addr *int64, new int64) (old int64)
func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
func SwapUint32(addr *uint32, new uint32) (old uint32)
func SwapUint64(addr *uint64, new uint64) (old uint64)
func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)

syscall
func AcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped) (err error)
func Bind(fd Handle, sa Sockaddr) (err error)
func BytePtrFromString(s string) (*byte, error)
func ByteSliceFromString(s string) ([]byte, error)
func CancelIo(s Handle) (err error)
func CancelIoEx(s Handle, o *Overlapped) (err error)
func CertAddCertificateContextToStore(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext) (err error)
func CertCloseStore(store Handle, flags uint32) (err error)
func CertFreeCertificateChain(ctx *CertChainContext)
func CertFreeCertificateContext(ctx *CertContext) (err error)
func CertGetCertificateChain(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext) (err error)
func CertVerifyCertificateChainPolicy(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus) (err error)
func Chdir(path string) (err error)
func Chmod(path string, mode uint32) (err error)
func Chown(path string, uid int, gid int) (err error)
func Clearenv()
func Close(fd Handle) (err error)
func CloseHandle(handle Handle) (err error)
func CloseOnExec(fd Handle)
func Closesocket(s Handle) (err error)
func CommandLineToArgv(cmd *uint16, argc *int32) (argv *[8192]*[8192]uint16, err error)
func ComputerName() (name string, err error)
func Connect(fd Handle, sa Sockaddr) (err error)
func ConnectEx(fd Handle, sa Sockaddr, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped) error
func ConvertSidToStringSid(sid *SID, stringSid **uint16) (err error)
func ConvertStringSidToSid(stringSid *uint16, sid **SID) (err error)
func CopySid(destSidLen uint32, destSid *SID, srcSid *SID) (err error)
func CreateDirectory(path *uint16, sa *SecurityAttributes) (err error)
func CreatePipe(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32) (err error)
func CreateProcess(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation) (err error)
func CryptAcquireContext(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32) (err error)
func CryptGenRandom(provhandle Handle, buflen uint32, buf *byte) (err error)
func CryptReleaseContext(provhandle Handle, flags uint32) (err error)
func DeleteFile(path *uint16) (err error)
func DnsQuery(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte) (status error)
func DnsRecordListFree(rl *DNSRecord, freetype uint32)
func DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32) (err error)
func Environ() []string
func EscapeArg(s string) string
func Exec(argv0 string, argv []string, envv []string) (err error)
func Exit(code int)
func ExitProcess(exitcode uint32)
func Fchdir(fd Handle) (err error)
func Fchmod(fd Handle, mode uint32) (err error)
func Fchown(fd Handle, uid int, gid int) (err error)
func FindClose(handle Handle) (err error)
func FindNextFile(handle Handle, data *Win32finddata) (err error)
func FlushFileBuffers(handle Handle) (err error)
func FlushViewOfFile(addr uintptr, length uintptr) (err error)
func FormatMessage(flags uint32, msgsrc uint32, msgid uint32, langid uint32, buf []uint16, args *byte) (n uint32, err error)
func FreeAddrInfoW(addrinfo *AddrinfoW)
func FreeEnvironmentStrings(envs *uint16) (err error)
func FreeLibrary(handle Handle) (err error)
func Fsync(fd Handle) (err error)
func Ftruncate(fd Handle, length int64) (err error)
func GetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32)
func GetAdaptersInfo(ai *IpAdapterInfo, ol *uint32) (errcode error)
func GetAddrInfoW(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW) (sockerr error)
func GetCommandLine() (cmd *uint16)
func GetComputerName(buf *uint16, n *uint32) (err error)
func GetConsoleMode(console Handle, mode *uint32) (err error)
func GetCurrentDirectory(buflen uint32, buf *uint16) (n uint32, err error)
func GetEnvironmentStrings() (envs *uint16, err error)
func GetEnvironmentVariable(name *uint16, buffer *uint16, size uint32) (n uint32, err error)
func GetExitCodeProcess(handle Handle, exitcode *uint32) (err error)
func GetFileAttributes(name *uint16) (attrs uint32, err error)
func GetFileAttributesEx(name *uint16, level uint32, info *byte) (err error)
func GetFileInformationByHandle(handle Handle, data *ByHandleFileInformation) (err error)
func GetFileType(filehandle Handle) (n uint32, err error)
func GetFullPathName(path *uint16, buflen uint32, buf *uint16, fname **uint16) (n uint32, err error)
func GetIfEntry(pIfRow *MibIfRow) (errcode error)
func GetLastError() (lasterr error)
func GetLengthSid(sid *SID) (len uint32)
func GetLongPathName(path *uint16, buf *uint16, buflen uint32) (n uint32, err error)
func GetProcAddress(module Handle, procname string) (proc uintptr, err error)
func GetProcessTimes(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime) (err error)
func GetQueuedCompletionStatus(cphandle Handle, qty *uint32, key *uint32, overlapped **Overlapped, timeout uint32) (err error)
func GetShortPathName(longpath *uint16, shortpath *uint16, buflen uint32) (n uint32, err error)
func GetStartupInfo(startupInfo *StartupInfo) (err error)
func GetSystemTimeAsFileTime(time *Filetime)
func GetTempPath(buflen uint32, buf *uint16) (n uint32, err error)
func GetTimeZoneInformation(tzi *Timezoneinformation) (rc uint32, err error)
func GetTokenInformation(t Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32) (err error)
func GetUserNameEx(nameFormat uint32, nameBuffre *uint16, nSize *uint32) (err error)
func GetUserProfileDirectory(t Token, dir *uint16, dirLen *uint32) (err error)
func GetVersion() (ver uint32, err error)
func Getegid() (egid int)
func Getenv(key string) (value string, found bool)
func Geteuid() (euid int)
func Getgid() (gid int)
func Getgroups() (gids []int, err error)
func Getpagesize() int
func Getpid() (pid int)
func Getppid() (ppid int)
func Getsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error)
func GetsockoptInt(fd Handle, level, opt int) (int, error)
func Gettimeofday(tv *Timeval) (err error)
func Getuid() (uid int)
func Getwd() (wd string, err error)
func Lchown(path string, uid int, gid int) (err error)
func Link(oldpath, newpath string) (err error)
func Listen(s Handle, n int) (err error)
func LoadCancelIoEx() error
func LoadConnectEx() error
func LoadGetAddrInfo() error
func LoadSetFileCompletionNotificationModes() error
func LookupAccountName(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32) (err error)
func LookupAccountSid(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32) (err error)
func MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr) (addr uintptr, err error)
func Mkdir(path string, mode uint32) (err error)
func MoveFile(from *uint16, to *uint16) (err error)
func NetApiBufferFree(buf *byte) (neterr error)
func NetGetJoinInformation(server *uint16, name **uint16, bufType *uint32) (neterr error)
func NetUserGetInfo(serverName *uint16, userName *uint16, level uint32, buf **byte) (neterr error)
func NewCallback(fn interface{}) uintptr
func Ntohs(netshort uint16) (u uint16)
func OpenProcessToken(h Handle, access uint32, token *Token) (err error)
func Pipe(p []Handle) (err error)
func PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uint32, overlapped *Overlapped) (err error)
func Read(fd Handle, p []byte) (n int, err error)
func ReadConsole(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte) (err error)
func ReadDirectoryChanges(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error)
func ReadFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped) (err error)
func Readlink(path string, buf []byte) (n int, err error)
func Recvfrom(fd Handle, p []byte, flags int) (n int, from Sockaddr, err error)
func RegCloseKey(key Handle) (regerrno error)
func RegEnumKeyEx(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime) (regerrno error)
func RegOpenKeyEx(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle) (regerrno error)
func RegQueryInfoKey(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime) (regerrno error)
func RegQueryValueEx(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32) (regerrno error)
func RemoveDirectory(path *uint16) (err error)
func Rename(oldpath, newpath string) (err error)
func Rmdir(path string) (err error)
func Seek(fd Handle, offset int64, whence int) (newoffset int64, err error)
func Sendto(fd Handle, p []byte, flags int, to Sockaddr) (err error)
func SetCurrentDirectory(path *uint16) (err error)
func SetEndOfFile(handle Handle) (err error)
func SetEnvironmentVariable(name *uint16, value *uint16) (err error)
func SetFileAttributes(name *uint16, attrs uint32) (err error)
func SetFileCompletionNotificationModes(handle Handle, flags uint8) (err error)
func SetFilePointer(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32) (newlowoffset uint32, err error)
func SetFileTime(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime) (err error)
func SetHandleInformation(handle Handle, mask uint32, flags uint32) (err error)
func SetNonblock(fd Handle, nonblocking bool) (err error)
func Setenv(key, value string) error
func Setsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error)
func SetsockoptIPMreq(fd Handle, level, opt int, mreq *IPMreq) (err error)
func SetsockoptIPv6Mreq(fd Handle, level, opt int, mreq *IPv6Mreq) (err error)
func SetsockoptInet4Addr(fd Handle, level, opt int, value [4]byte) (err error)
func SetsockoptInt(fd Handle, level, opt int, value int) (err error)
func SetsockoptLinger(fd Handle, level, opt int, l *Linger) (err error)
func SetsockoptTimeval(fd Handle, level, opt int, tv *Timeval) (err error)
func Shutdown(fd Handle, how int) (err error)
func StartProcess(argv0 string, argv []string, attr *ProcAttr) (pid int, handle uintptr, err error)
func StringBytePtr(s string) *byte
func StringByteSlice(s string) []byte
func StringToUTF16(s string) []uint16
func StringToUTF16Ptr(s string) *uint16
func Symlink(path, link string) (err error)
func Syscall(trap, nargs, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
func Syscall12(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 uintptr) (r1, r2 uintptr, err Errno)
func Syscall15(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15 uintptr) (r1, r2 uintptr, err Errno)
func Syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
func Syscall9(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err Errno)
func TerminateProcess(handle Handle, exitcode uint32) (err error)
func TimespecToNsec(ts Timespec) int64
func TranslateAccountName(username string, from, to uint32, initSize int) (string, error)
func TranslateName(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32) (err error)
func TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32) (err error)
func UTF16FromString(s string) ([]uint16, error)
func UTF16PtrFromString(s string) (*uint16, error)
func UTF16ToString(s []uint16) string
func Unlink(path string) (err error)
func UnmapViewOfFile(addr uintptr) (err error)
func Utimes(path string, tv []Timeval) (err error)
func UtimesNano(path string, ts []Timespec) (err error)
func VirtualLock(addr uintptr, length uintptr) (err error)
func VirtualUnlock(addr uintptr, length uintptr) (err error)
func WSACleanup() (err error)
func WSAEnumProtocols(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32) (n int32, err error)
func WSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error)
func WSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte) (err error)
func WSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error)
func WSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error)
func WSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte) (err error)
func WSASendto(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to Sockaddr, overlapped *Overlapped, croutine *byte) (err error)
func WSAStartup(verreq uint32, data *WSAData) (sockerr error)
func WaitForSingleObject(handle Handle, waitMilliseconds uint32) (event uint32, err error)
func Write(fd Handle, p []byte) (n int, err error)
func WriteConsole(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte) (err error)
func WriteFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped) (err error)
func CertCreateCertificateContext(certEncodingType uint32, certEncoded *byte, encodedLen uint32) (context *CertContext, err error)
func CertEnumCertificatesInStore(store Handle, prevContext *CertContext) (context *CertContext, err error)
func LoadDLL(name string) (dll *DLL, err error)
func MustLoadDLL(name string) *DLL
func (d *DLL) FindProc(name string) (proc *Proc, err error)
func (d *DLL) MustFindProc(name string) *Proc
func (d *DLL) Release() (err error)
func (e *DLLError) Error() string
func (e Errno) Error() string
func (e Errno) Temporary() bool
func (e Errno) Timeout() bool
func NsecToFiletime(nsec int64) (ft Filetime)
func (ft *Filetime) Nanoseconds() int64
func Accept(fd Handle) (nfd Handle, sa Sockaddr, err error)
func CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr) (handle Handle, err error)
func CertOpenSystemStore(hprov Handle, name *uint16) (store Handle, err error)
func CreateFile(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile int32) (handle Handle, err error)
func CreateFileMapping(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16) (handle Handle, err error)
func CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uint32, threadcnt uint32) (handle Handle, err error)
func FindFirstFile(name *uint16, data *Win32finddata) (handle Handle, err error)
func GetCurrentProcess() (pseudoHandle Handle, err error)
func GetStdHandle(stdhandle int) (handle Handle, err error)
func LoadLibrary(libname string) (handle Handle, err error)
func LocalFree(hmem Handle) (handle Handle, err error)
func Open(path string, mode int, perm uint32) (fd Handle, err error)
func OpenProcess(da uint32, inheritHandle bool, pid uint32) (handle Handle, err error)
func Socket(domain, typ, proto int) (fd Handle, err error)
func GetHostByName(name string) (h *Hostent, err error)
func NewLazyDLL(name string) *LazyDLL
func (d *LazyDLL) Handle() uintptr
func (d *LazyDLL) Load() error
func (d *LazyDLL) NewProc(name string) *LazyProc
func (p *LazyProc) Addr() uintptr
func (p *LazyProc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error)
func (p *LazyProc) Find() error
func (p *Proc) Addr() uintptr
func (p *Proc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error)
func GetProtoByName(name string) (p *Protoent, err error)
func (rsa *RawSockaddrAny) Sockaddr() (Sockaddr, error)
func LookupSID(system, account string) (sid *SID, domain string, accType uint32, err error)
func StringToSid(s string) (*SID, error)
func (sid *SID) Copy() (*SID, error)
func (sid *SID) Len() int
func (sid *SID) LookupAccount(system string) (account, domain string, accType uint32, err error)
func (sid *SID) String() (string, error)
func GetServByName(name string, proto string) (s *Servent, err error)
func (s Signal) Signal()
func (s Signal) String() string
func Getpeername(fd Handle) (sa Sockaddr, err error)
func Getsockname(fd Handle) (sa Sockaddr, err error)
func NsecToTimespec(nsec int64) (ts Timespec)
func (ts *Timespec) Nano() int64
func (ts *Timespec) Unix() (sec int64, nsec int64)
func NsecToTimeval(nsec int64) (tv Timeval)
func (tv *Timeval) Nano() int64
func (tv *Timeval) Nanoseconds() int64
func (tv *Timeval) Unix() (sec int64, nsec int64)
func OpenCurrentProcessToken() (Token, error)
func (t Token) Close() error
func (t Token) GetTokenPrimaryGroup() (*Tokenprimarygroup, error)
func (t Token) GetTokenUser() (*Tokenuser, error)
func (t Token) GetUserProfileDirectory() (string, error)
func (w WaitStatus) Continued() bool
func (w WaitStatus) CoreDump() bool
func (w WaitStatus) ExitStatus() int
func (w WaitStatus) Exited() bool
func (w WaitStatus) Signal() Signal
func (w WaitStatus) Signaled() bool
func (w WaitStatus) StopSignal() Signal
func (w WaitStatus) Stopped() bool
func (w WaitStatus) TrapCause() int

testing
func AllocsPerRun(runs int, f func()) (avg float64)
func Main(matchString func(pat, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample)
func RegisterCover(c Cover)
func RunBenchmarks(matchString func(pat, str string) (bool, error), benchmarks []InternalBenchmark)
func RunExamples(matchString func(pat, str string) (bool, error), examples []InternalExample) (ok bool)
func RunTests(matchString func(pat, str string) (bool, error), tests []InternalTest) (ok bool)
func Short() bool
func Verbose() bool
func (c *B) Error(args ...interface{})
func (c *B) Errorf(format string, args ...interface{})
func (c *B) Fail()
func (c *B) FailNow()
func (c *B) Failed() bool
func (c *B) Fatal(args ...interface{})
func (c *B) Fatalf(format string, args ...interface{})
func (c *B) Log(args ...interface{})
func (c *B) Logf(format string, args ...interface{})
func (b *B) ReportAllocs()
func (b *B) ResetTimer()
func (b *B) SetBytes(n int64)
func (c *B) Skip(args ...interface{})
func (c *B) SkipNow()
func (c *B) Skipf(format string, args ...interface{})
func (c *B) Skipped() bool
func (b *B) StartTimer()
func (b *B) StopTimer()
func Benchmark(f func(b *B)) BenchmarkResult
func (r BenchmarkResult) AllocedBytesPerOp() int64
func (r BenchmarkResult) AllocsPerOp() int64
func (r BenchmarkResult) MemString() string
func (r BenchmarkResult) NsPerOp() int64
func (r BenchmarkResult) String() string
func (c *T) Error(args ...interface{})
func (c *T) Errorf(format string, args ...interface{})
func (c *T) Fail()
func (c *T) FailNow()
func (c *T) Failed() bool
func (c *T) Fatal(args ...interface{})
func (c *T) Fatalf(format string, args ...interface{})
func (c *T) Log(args ...interface{})
func (c *T) Logf(format string, args ...interface{})
func (t *T) Parallel()
func (c *T) Skip(args ...interface{})
func (c *T) SkipNow()
func (c *T) Skipf(format string, args ...interface{})
func (c *T) Skipped() bool

testing/iotest
func DataErrReader(r io.Reader) io.Reader
func HalfReader(r io.Reader) io.Reader
func NewReadLogger(prefix string, r io.Reader) io.Reader
func NewWriteLogger(prefix string, w io.Writer) io.Writer
func OneByteReader(r io.Reader) io.Reader
func TimeoutReader(r io.Reader) io.Reader
func TruncateWriter(w io.Writer, n int64) io.Writer

testing/quick
func Check(function interface{}, config *Config) (err error)
func CheckEqual(f, g interface{}, config *Config) (err error)
func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool)
func (s *CheckEqualError) Error() string
func (s *CheckError) Error() string
func (s SetupError) Error() string

text/scanner
func TokenString(tok rune) string
func (pos *Position) IsValid() bool
func (pos Position) String() string
func (s *Scanner) Init(src io.Reader) *Scanner
func (s *Scanner) Next() rune
func (s *Scanner) Peek() rune
func (s *Scanner) Pos() (pos Position)
func (s *Scanner) Scan() rune
func (s *Scanner) TokenText() string

text/tabwriter
func NewWriter(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer
func (b *Writer) Flush() (err error)
func (b *Writer) Init(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer
func (b *Writer) Write(buf []byte) (n int, err error)

text/template
func HTMLEscape(w io.Writer, b []byte)
func HTMLEscapeString(s string) string
func HTMLEscaper(args ...interface{}) string
func JSEscape(w io.Writer, b []byte)
func JSEscapeString(s string) string
func JSEscaper(args ...interface{}) string
func URLQueryEscaper(args ...interface{}) string
func Must(t *Template, err error) *Template
func New(name string) *Template
func ParseFiles(filenames ...string) (*Template, error)
func ParseGlob(pattern string) (*Template, error)
func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)
func (t *Template) Clone() (*Template, error)
func (t *Template) Delims(left, right string) *Template
func (t *Template) Execute(wr io.Writer, data interface{}) (err error)
func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error
func (t *Template) Funcs(funcMap FuncMap) *Template
func (t *Template) Lookup(name string) *Template
func (t *Template) Name() string
func (t *Template) New(name string) *Template
func (t *Template) Parse(text string) (*Template, error)
func (t *Template) ParseFiles(filenames ...string) (*Template, error)
func (t *Template) ParseGlob(pattern string) (*Template, error)
func (t *Template) Templates() []*Template

text/template/parse
func IsEmptyTree(n Node) bool
func Parse(name, text, leftDelim, rightDelim string, funcs ...map[string]interface{}) (treeSet map[string]*Tree, err error)
func (a *ActionNode) Copy() Node
func (a *ActionNode) String() string
func (b *BoolNode) Copy() Node
func (b *BoolNode) String() string
func (b *BranchNode) String() string
func (c *ChainNode) Add(field string)
func (c *ChainNode) Copy() Node
func (c *ChainNode) String() string
func (c *CommandNode) Copy() Node
func (c *CommandNode) String() string
func (d *DotNode) Copy() Node
func (d *DotNode) String() string
func (d *DotNode) Type() NodeType
func (f *FieldNode) Copy() Node
func (f *FieldNode) String() string
func NewIdentifier(ident string) *IdentifierNode
func (i *IdentifierNode) Copy() Node
func (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode
func (i *IdentifierNode) String() string
func (i *IfNode) Copy() Node
func (l *ListNode) Copy() Node
func (l *ListNode) CopyList() *ListNode
func (l *ListNode) String() string
func (n *NilNode) Copy() Node
func (n *NilNode) String() string
func (n *NilNode) Type() NodeType
func (t NodeType) Type() NodeType
func (n *NumberNode) Copy() Node
func (n *NumberNode) String() string
func (p *PipeNode) Copy() Node
func (p *PipeNode) CopyPipe() *PipeNode
func (p *PipeNode) String() string
func (p Pos) Position() Pos
func (r *RangeNode) Copy() Node
func (s *StringNode) Copy() Node
func (s *StringNode) String() string
func (t *TemplateNode) Copy() Node
func (t *TemplateNode) String() string
func (t *TextNode) Copy() Node
func (t *TextNode) String() string
func New(name string, funcs ...map[string]interface{}) *Tree
func (t *Tree) Copy() *Tree
func (t *Tree) ErrorContext(n Node) (location, context string)
func (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)
func (v *VariableNode) Copy() Node
func (v *VariableNode) String() string
func (w *WithNode) Copy() Node

time
func After(d Duration) <-chan Time
func Sleep(d Duration)
func Tick(d Duration) <-chan Time
func ParseDuration(s string) (Duration, error)
func Since(t Time) Duration
func (d Duration) Hours() float64
func (d Duration) Minutes() float64
func (d Duration) Nanoseconds() int64
func (d Duration) Seconds() float64
func (d Duration) String() string
func FixedZone(name string, offset int) *Location
func LoadLocation(name string) (*Location, error)
func (l *Location) String() string
func (m Month) String() string
func (e *ParseError) Error() string
func NewTicker(d Duration) *Ticker
func (t *Ticker) Stop()
func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time
func Now() Time
func Parse(layout, value string) (Time, error)
func ParseInLocation(layout, value string, loc *Location) (Time, error)
func Unix(sec int64, nsec int64) Time
func (t Time) Add(d Duration) Time
func (t Time) AddDate(years int, months int, days int) Time
func (t Time) After(u Time) bool
func (t Time) Before(u Time) bool
func (t Time) Clock() (hour, min, sec int)
func (t Time) Date() (year int, month Month, day int)
func (t Time) Day() int
func (t Time) Equal(u Time) bool
func (t Time) Format(layout string) string
func (t *Time) GobDecode(data []byte) error
func (t Time) GobEncode() ([]byte, error)
func (t Time) Hour() int
func (t Time) ISOWeek() (year, week int)
func (t Time) In(loc *Location) Time
func (t Time) IsZero() bool
func (t Time) Local() Time
func (t Time) Location() *Location
func (t Time) MarshalBinary() ([]byte, error)
func (t Time) MarshalJSON() ([]byte, error)
func (t Time) MarshalText() ([]byte, error)
func (t Time) Minute() int
func (t Time) Month() Month
func (t Time) Nanosecond() int
func (t Time) Round(d Duration) Time
func (t Time) Second() int
func (t Time) String() string
func (t Time) Sub(u Time) Duration
func (t Time) Truncate(d Duration) Time
func (t Time) UTC() Time
func (t Time) Unix() int64
func (t Time) UnixNano() int64
func (t *Time) UnmarshalBinary(data []byte) error
func (t *Time) UnmarshalJSON(data []byte) (err error)
func (t *Time) UnmarshalText(data []byte) (err error)
func (t Time) Weekday() Weekday
func (t Time) Year() int
func (t Time) YearDay() int
func (t Time) Zone() (name string, offset int)
func AfterFunc(d Duration, f func()) *Timer
func NewTimer(d Duration) *Timer
func (t *Timer) Reset(d Duration) bool
func (t *Timer) Stop() bool
func (d Weekday) String() string

unicode
func In(r rune, ranges ...*RangeTable) bool
func Is(rangeTab *RangeTable, r rune) bool
func IsControl(r rune) bool
func IsDigit(r rune) bool
func IsGraphic(r rune) bool
func IsLetter(r rune) bool
func IsLower(r rune) bool
func IsMark(r rune) bool
func IsNumber(r rune) bool
func IsOneOf(ranges []*RangeTable, r rune) bool
func IsPrint(r rune) bool
func IsPunct(r rune) bool
func IsSpace(r rune) bool
func IsSymbol(r rune) bool
func IsTitle(r rune) bool
func IsUpper(r rune) bool
func SimpleFold(r rune) rune
func To(_case int, r rune) rune
func ToLower(r rune) rune
func ToTitle(r rune) rune
func ToUpper(r rune) rune
func (special SpecialCase) ToLower(r rune) rune
func (special SpecialCase) ToTitle(r rune) rune
func (special SpecialCase) ToUpper(r rune) rune

unicode/utf16
func Decode(s []uint16) []rune
func DecodeRune(r1, r2 rune) rune
func Encode(s []rune) []uint16
func EncodeRune(r rune) (r1, r2 rune)
func IsSurrogate(r rune) bool

unicode/utf8
func DecodeLastRune(p []byte) (r rune, size int)
func DecodeLastRuneInString(s string) (r rune, size int)
func DecodeRune(p []byte) (r rune, size int)
func DecodeRuneInString(s string) (r rune, size int)
func EncodeRune(p []byte, r rune) int
func FullRune(p []byte) bool
func FullRuneInString(s string) bool
func RuneCount(p []byte) int
func RuneCountInString(s string) (n int)
func RuneLen(r rune) int
func RuneStart(b byte) bool
func Valid(p []byte) bool
func ValidRune(r rune) bool
func ValidString(s string) bool

unsafe
func Alignof(v ArbitraryType) uintptr
func Offsetof(v ArbitraryType) uintptr
func Sizeof(v ArbitraryType) uintptr
