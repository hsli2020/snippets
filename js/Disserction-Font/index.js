// Generated by CoffeeScript 2.4.1
(function() {
  //stepKern = 0.5
  var charKern, charSpace, checkboxes, defaultFont, defaultForm, getOffset, getParameterByName, j, len, lineKern, loadFonts, loadState, loadSymbol, margin, multiFontSep, old, radioButton, radioButtons, resize, style, svg, svgRoot, toggles, updateText;

  charKern = 2;

  lineKern = 4;

  multiFontSep = 2;

  charSpace = 4;

  margin = 0.33333333333;

  style = "/*\n.p0 { fill: #ffff00; }\n.p1 { fill: #ff0000; }\n.p2 { fill: #00ff00; }\n.p3 { fill: #3d2121; }\n*/\n/* http://paletton.com/#uid=75-1U0kllllnjR4mkumkmckjn3k */\n.p0 { fill: #EA4757; stroke: #EA4757; }\n.p1 { fill: #A648E5; stroke: #A648E5; }\n.p2 { fill: #FFFB45; stroke: #FFFB45; }\n.p3 { fill: #61F242; stroke: #61F242; }\n.p0, .p1, .p2, .p3, .p { stroke-width: 0.1; }\n.p { fill: black; stroke: black; }\n.b { stroke: black; stroke-width: 0.2; stroke-linecap: round }\nsymbol { overflow: visible; }";

  if (typeof window !== "undefined" && window !== null) {
    window.style = style;
  }

  svg = svgRoot = null;

  //# Based on jolly.exe's code from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
  getParameterByName = function(name) {
    var regex, results;
    name = name.replace(/[\[]/g, "\\[").replace(/[\]]/g, "\\]");
    regex = new RegExp(`[\\?&]${name}=([^&#]*)`);
    results = regex.exec(location.search);
    if (results == null) {
      return null;
    }
    return decodeURIComponent(results[1].replace(/\+/g, " "));
  };

  radioButtons = [
    {
      options: ['letter',
    'solved',
    'square',
    'both'],
      default: defaultForm = 'both'
    },
    {
      options: ['4piece',
    '3piece',
    '2piece-discon',
    '2piece'],
      default: defaultFont = '4piece'
    }
  ];

  checkboxes = [];

  toggles = checkboxes;

  for (j = 0, len = radioButtons.length; j < len; j++) {
    radioButton = radioButtons[j];
    toggles = toggles.concat(radioButton.options);
  }

  loadState = function() {
    var checkbox, k, key, l, len1, len2, radio, ref, ref1, text;
    for (k = 0, len1 = toggles.length; k < len1; k++) {
      checkbox = toggles[k];
      if ((ref = document.getElementById(checkbox)) != null) {
        ref.checked = getParameterByName(checkbox);
      }
    }
    for (l = 0, len2 = radioButtons.length; l < len2; l++) {
      radio = radioButtons[l];
      if (((function() {
        var len3, m, ref1, ref2, results1;
        ref1 = radio.options;
        results1 = [];
        for (m = 0, len3 = ref1.length; m < len3; m++) {
          key = ref1[m];
          if ((ref2 = document.getElementById(key)) != null ? ref2.checked : void 0) {
            results1.push(true);
          }
        }
        return results1;
      })()).length === 0) {
        document.getElementById(radio.default).checked = true;
      }
    }
    text = (ref1 = getParameterByName('text')) != null ? ref1 : 'text';
    document.getElementById('text').value = text;
    return updateText(false);
  };

  old = {};

  updateText = function(setUrl = true) {
    var actualParams, bbox, c, char, checkbox, count, dy, encoded, font, font2, fontName, fontName2, form, i, k, key, l, len1, len2, len3, len4, len5, len6, line, m, n, o, p, params, q, ref, ref1, ref2, sub, subs, symbol, value, x, xmax, y;
    params = {};
    actualParams = {};
    params.text = actualParams.text = document.getElementById('text').value.replace(/\r\n/g, '\r').replace(/\r/g, '\n');
    for (k = 0, len1 = toggles.length; k < len1; k++) {
      checkbox = toggles[k];
      params[checkbox] = actualParams[checkbox] = (ref = document.getElementById(checkbox)) != null ? ref.checked : void 0;
    }
    if (((function() {
      var results1;
      results1 = [];
      for (key in params) {
        if (params[key] === old[key]) {
          results1.push(true);
        }
      }
      return results1;
    })()).length === ((function() {
      var results1;
      results1 = [];
      for (key in params) {
        results1.push(key);
      }
      return results1;
    })()).length) {
      return;
    }
    old = params;
    svgRoot.clear();
    for (l = 0, len2 = toggles.length; l < len2; l++) {
      checkbox = toggles[l];
      if (params[checkbox]) {
        svgRoot.addClass(checkbox);
      } else {
        svgRoot.removeClass(checkbox);
      }
    }
    fontName = '';
    for (i = m = 2; m <= 4; i = ++m) {
      if (params[`${i}piece`]) {
        fontName = `${i}piece_`;
        break;
      }
      if (params[`${i}piece-discon`]) {
        fontName = `${i}piece-discon_`;
        break;
      }
    }
    if (!fontName) {
      fontName = `${defaultFont}_`;
    }
    ref1 = ['letter', 'solved', 'square', 'both'];
    for (n = 0, len3 = ref1.length; n < len3; n++) {
      form = ref1[n];
      if (params[form]) {
        fontName += form;
        break;
      }
    }
    if (fontName[fontName.length - 1] === '_') {
      fontName += defaultForm;
    }
    if (fontName.slice(-4) === 'both') {
      font2 = fonts[fontName2 = fontName.replace(/both$/, 'square')];
      font = fonts[fontName = fontName.replace(/both$/, 'solved')];
    } else {
      font = fonts[fontName];
    }
    xmax = 0;
    y = 0;
    ref2 = params.text.split('\n');
    for (o = 0, len4 = ref2.length; o < len4; o++) {
      line = ref2[o];
      if (y !== 0) {
        y += lineKern;
      }
      x = 0;
      dy = 0;
      subs = (function() {
        var len5, p, results1;
        results1 = [];
        for (c = p = 0, len5 = line.length; p < len5; c = ++p) {
          char = line[c];
          char = char.toUpperCase();
          if (char in font) {
            if (c !== 0) {
              x += charKern;
            }
            symbol = loadSymbol(font, fontName, char);
            sub = svgRoot.use(symbol).move(x, y);
            bbox = sub.bbox();
            //svgRoot.rect bbox.w, bbox.h
            //.move x, y
            //.fill
            //  color: 'yellow'
            //  opacity: 0.5
            x += bbox.width;
            xmax = Math.max(xmax, x);
            dy = Math.max(dy, bbox.height);
            results1.push(sub);
          } else {
            if (char === ' ') {
              x += charSpace;
            }
            continue;
          }
        }
        return results1;
      })();
      for (p = 0, len5 = subs.length; p < len5; p++) {
        sub = subs[p];
        bbox = sub.bbox();
        //# Centered:
        sub.dy((dy - bbox.height) / 2);
      }
      //# Bottom aligned:
      //sub.dy sub.y + dy - bbox.height
      y += dy;
      if (font2 != null) {
        dy = 0;
        y += multiFontSep;
        count = 0;
        for (q = 0, len6 = line.length; q < len6; q++) {
          char = line[q];
          char = char.toUpperCase();
          if (char in font) {
            if (char in font2) {
              sub = subs[count];
              bbox = sub.bbox();
              symbol = loadSymbol(font2, fontName2, char);
              svgRoot.use(symbol).move(sub.x() + (bbox.width - font2[char].width) / 2, y);
              dy = Math.max(dy, font2[char].height);
            }
            count += 1;
          }
        }
        y += dy;
      }
    }
    svg.viewbox({
      x: -margin,
      y: -margin,
      width: xmax + 2 * margin,
      height: y + 2 * margin
    });
    if (setUrl) {
      encoded = (function() {
        var results1;
        results1 = [];
        for (key in actualParams) {
          value = actualParams[key];
          if (value === true) {
            value = '1';
          } else if (value === false) {
            continue;
          }
          results1.push(`${key}=${encodeURIComponent(value).replace(/%20/g, '+')}`);
        }
        return results1;
      })();
      return history.pushState(null, 'text', `${document.location.pathname}?${encoded.join('&')}`);
    }
  };

  //# Based on meouw's answer on http://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element
  getOffset = function(el) {
    var x, y;
    x = y = 0;
    while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
      x += el.offsetLeft - el.scrollLeft;
      y += el.offsetTop - el.scrollTop;
      el = el.offsetParent;
    }
    return {
      x: x,
      y: y
    };
  };

  resize = function() {
    var height, offset;
    offset = getOffset(document.getElementById('output'));
    height = Math.max(100, window.innerHeight - offset.y);
    return document.getElementById('output').style.height = `${height}px`;
  };

  loadFonts = function() {
    var data, fontName, letter, letterFont, letterFontName, letters, results1;
    results1 = [];
    for (fontName in fonts) {
      letters = fonts[fontName];
      if (fontName.slice(-7) === '_solved') {
        letterFontName = fontName.slice(0, -7) + '_letter';
        letterFont = fonts[letterFontName] = {};
        results1.push((function() {
          var results2;
          results2 = [];
          for (letter in letters) {
            data = letters[letter];
            results2.push(letterFont[letter] = {
              width: data.width,
              height: data.height,
              pixels: data.pixels
            });
          }
          return results2;
        })());
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  if (typeof window !== "undefined" && window !== null) {
    window.loadFonts = loadFonts;
  }

  loadSymbol = function(font, fontName, letter, svgRoot = svg) {
    var char, k, l, len1, len2, len3, m, pixel, pixels, ref, ref1, ref2, symbol, x, y;
    char = font[letter];
    if (char.symbol == null) {
      symbol = char.symbol = svgRoot.defs().symbol().id(`${fontName}_${letter}`);
      pixels = {};
      if (fontName.slice(-7) === '_letter') {
        ref = char.pixels;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          [pixel, x, y] = ref[k];
          symbol.rect(1, 1).move(x, y).addClass("p");
        }
      } else {
        ref1 = char.pixels;
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          [pixel, x, y] = ref1[l];
          symbol.rect(1, 1).move(x, y).addClass(`p${pixel}`);
          pixels[`${x},${y}`] = pixel;
        }
        ref2 = char.pixels;
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          [pixel, x, y] = ref2[m];
          if (pixel !== pixels[`${x - 1},${y}`]) {
            symbol.line(x, y, x, y + 1).addClass('b');
          }
          if (pixels[`${x + 1},${y}`] == null) {
            symbol.line(x + 1, y, x + 1, y + 1).addClass('b');
          }
          if (pixel !== pixels[`${x},${y - 1}`]) {
            symbol.line(x, y, x + 1, y).addClass('b');
          }
          if (pixels[`${x},${y + 1}`] == null) {
            symbol.line(x, y + 1, x + 1, y + 1).addClass('b');
          }
        }
      }
    }
    return char.symbol;
  };

  if (typeof window !== "undefined" && window !== null) {
    window.loadSymbol = loadSymbol;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.onload = function() {
      var checkbox, event, k, l, len1, len2, len3, m, ref, ref1, ref2, ref3, updateTextSoon;
      svg = SVG('output');
      svg.element('style').words(style);
      loadFonts();
      svgRoot = svg.group();
      updateTextSoon = function(event) {
        setTimeout(updateText, 0);
        return true;
      };
      ref = ['input', 'propertychange', 'keyup'];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        event = ref[k];
        if ((ref1 = document.getElementById('text')) != null) {
          ref1.addEventListener(event, updateTextSoon);
        }
      }
      ref2 = ['input', 'propertychange', 'click'];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        event = ref2[l];
        for (m = 0, len3 = toggles.length; m < len3; m++) {
          checkbox = toggles[m];
          (function(checkbox) {
            var ref3;
            return (ref3 = document.getElementById(checkbox)) != null ? ref3.addEventListener(event, updateTextSoon) : void 0;
          })(checkbox);
        }
      }
      window.addEventListener('popstate', loadState);
      window.addEventListener('resize', resize);
      loadState();
      resize();
      return (ref3 = document.getElementById('downloadSVG')) != null ? ref3.addEventListener('click', function() {
        var explicit;
        explicit = svg.svg();
        document.getElementById('download').href = URL.createObjectURL(new Blob([explicit], {
          type: "image/svg+xml"
        }));
        document.getElementById('download').download = 'dissect.svg';
        return document.getElementById('download').click();
      }) : void 0;
    };
  }

}).call(this);
